
TP2_exo1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000173c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001820  08001820  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001820  08001820  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001820  08001820  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001820  08001820  00011820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  0800182c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800182c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046f5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001415  00000000  00000000  00024721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00025b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  00026128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dca0  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005451  00000000  00000000  000342f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047561  00000000  00000000  00039741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00080ca2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001320  00000000  00000000  00080cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017e4 	.word	0x080017e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080017e4 	.word	0x080017e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <Button_init>:
#include "button.h"
#include "stm32l0xx_ll_exti.h"

void Button_init(BUTTON_TypeDef *button, GPIO_TypeDef * port, uint8_t pn,
		uint8_t pl) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	0019      	movs	r1, r3
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	1dbb      	adds	r3, r7, #6
 8000342:	1c0a      	adds	r2, r1, #0
 8000344:	701a      	strb	r2, [r3, #0]

	button->gpioPort = port;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
	button->pin = pn;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	1dfa      	adds	r2, r7, #7
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	711a      	strb	r2, [r3, #4]
	button->pull = pl;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1dba      	adds	r2, r7, #6
 8000358:	7812      	ldrb	r2, [r2, #0]
 800035a:	715a      	strb	r2, [r3, #5]

	//Activation de l'horloge sur le port en question
	//1-déterminer le numéro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port = ((uint32_t) port - IOPPERIPH_BASE) / 0x400;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	22b0      	movs	r2, #176	; 0xb0
 8000360:	0612      	lsls	r2, r2, #24
 8000362:	4694      	mov	ip, r2
 8000364:	4463      	add	r3, ip
 8000366:	0a9a      	lsrs	r2, r3, #10
 8000368:	2117      	movs	r1, #23
 800036a:	187b      	adds	r3, r7, r1
 800036c:	701a      	strb	r2, [r3, #0]
	//2-activation de l'hologe
	RCC->IOPENR |= 1 << nb_port;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <Button_init+0xb8>)
 8000370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000372:	187b      	adds	r3, r7, r1
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2101      	movs	r1, #1
 8000378:	4099      	lsls	r1, r3
 800037a:	000b      	movs	r3, r1
 800037c:	0019      	movs	r1, r3
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <Button_init+0xb8>)
 8000380:	430a      	orrs	r2, r1
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en entrée
	button->gpioPort->MODER &= ~(0b11 << 2 * pn);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	2103      	movs	r1, #3
 8000392:	4099      	lsls	r1, r3
 8000394:	000b      	movs	r3, r1
 8000396:	43db      	mvns	r3, r3
 8000398:	0019      	movs	r1, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	400a      	ands	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]

	//configuration du type de pull
	button->gpioPort->PUPDR &= ~(0b11 << 2 * pn);
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68da      	ldr	r2, [r3, #12]
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	2103      	movs	r1, #3
 80003b0:	4099      	lsls	r1, r3
 80003b2:	000b      	movs	r3, r1
 80003b4:	43db      	mvns	r3, r3
 80003b6:	0019      	movs	r1, r3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	400a      	ands	r2, r1
 80003be:	60da      	str	r2, [r3, #12]
	button->gpioPort->PUPDR |= (pl << 2 * pn);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	1dbb      	adds	r3, r7, #6
 80003c8:	7819      	ldrb	r1, [r3, #0]
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4099      	lsls	r1, r3
 80003d2:	000b      	movs	r3, r1
 80003d4:	0019      	movs	r1, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	430a      	orrs	r2, r1
 80003dc:	60da      	str	r2, [r3, #12]
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b006      	add	sp, #24
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	40021000 	.word	0x40021000

080003ec <Button_enableIRQ>:
	else{
			return 0;
	}
}

void Button_enableIRQ(BUTTON_TypeDef *button, uint8_t trigger) {
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cfb      	adds	r3, r7, #3
 80003f8:	701a      	strb	r2, [r3, #0]

	//activation de l'interruption externe
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003fa:	4b56      	ldr	r3, [pc, #344]	; (8000554 <Button_enableIRQ+0x168>)
 80003fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fe:	4b55      	ldr	r3, [pc, #340]	; (8000554 <Button_enableIRQ+0x168>)
 8000400:	2101      	movs	r1, #1
 8000402:	430a      	orrs	r2, r1
 8000404:	635a      	str	r2, [r3, #52]	; 0x34

	/*chercher à quel registre EXTI de SYSCFG on doit accéder parmi les quatre disponibles*/
	//1-détermination du numéro d'EXTI
	uint8_t nb_EXTI = button->pin / 4;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791a      	ldrb	r2, [r3, #4]
 800040a:	240f      	movs	r4, #15
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0892      	lsrs	r2, r2, #2
 8000410:	701a      	strb	r2, [r3, #0]
	//2-déterminer le numéro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port = ((uint32_t) button->gpioPort - IOPPERIPH_BASE) / 0x400;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	22b0      	movs	r2, #176	; 0xb0
 8000418:	0612      	lsls	r2, r2, #24
 800041a:	4694      	mov	ip, r2
 800041c:	4463      	add	r3, ip
 800041e:	0a9a      	lsrs	r2, r3, #10
 8000420:	250e      	movs	r5, #14
 8000422:	197b      	adds	r3, r7, r5
 8000424:	701a      	strb	r2, [r3, #0]
	//3-configuration du registre EXTI de SYSCFG
	SYSCFG->EXTICR[nb_EXTI] &= ~(0b1111 << 4 * (button->pin % 4));
 8000426:	4a4c      	ldr	r2, [pc, #304]	; (8000558 <Button_enableIRQ+0x16c>)
 8000428:	193b      	adds	r3, r7, r4
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3302      	adds	r3, #2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	589a      	ldr	r2, [r3, r2]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	0019      	movs	r1, r3
 8000438:	2303      	movs	r3, #3
 800043a:	400b      	ands	r3, r1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	4099      	lsls	r1, r3
 8000442:	000b      	movs	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	0018      	movs	r0, r3
 8000448:	4943      	ldr	r1, [pc, #268]	; (8000558 <Button_enableIRQ+0x16c>)
 800044a:	193b      	adds	r3, r7, r4
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4002      	ands	r2, r0
 8000450:	3302      	adds	r3, #2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	505a      	str	r2, [r3, r1]
	SYSCFG->EXTICR[nb_EXTI] |= (nb_port << 4 * (button->pin % 4));
 8000456:	4a40      	ldr	r2, [pc, #256]	; (8000558 <Button_enableIRQ+0x16c>)
 8000458:	193b      	adds	r3, r7, r4
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3302      	adds	r3, #2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	589a      	ldr	r2, [r3, r2]
 8000462:	197b      	adds	r3, r7, r5
 8000464:	7819      	ldrb	r1, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	0018      	movs	r0, r3
 800046c:	2303      	movs	r3, #3
 800046e:	4003      	ands	r3, r0
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4099      	lsls	r1, r3
 8000474:	000b      	movs	r3, r1
 8000476:	0018      	movs	r0, r3
 8000478:	4937      	ldr	r1, [pc, #220]	; (8000558 <Button_enableIRQ+0x16c>)
 800047a:	193b      	adds	r3, r7, r4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	4302      	orrs	r2, r0
 8000480:	3302      	adds	r3, #2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	505a      	str	r2, [r3, r1]


	//activation d'EXTI dans IMR pour qu'elle ne soit pas masquée
	EXTI->IMR |= (1 << button->pin); 
 8000486:	4b35      	ldr	r3, [pc, #212]	; (800055c <Button_enableIRQ+0x170>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	0019      	movs	r1, r3
 8000490:	2301      	movs	r3, #1
 8000492:	408b      	lsls	r3, r1
 8000494:	0019      	movs	r1, r3
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <Button_enableIRQ+0x170>)
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

        //activation du type du trigger (front montant/descendant)
	switch (trigger) {
 800049c:	1cfb      	adds	r3, r7, #3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d01d      	beq.n	80004e0 <Button_enableIRQ+0xf4>
 80004a4:	dc33      	bgt.n	800050e <Button_enableIRQ+0x122>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d002      	beq.n	80004b0 <Button_enableIRQ+0xc4>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00c      	beq.n	80004c8 <Button_enableIRQ+0xdc>
 80004ae:	e02e      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_RISING:
	//activation de l'interruption sur front montant dans RTSR
		EXTI->RTSR|=(1<<button->pin);
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <Button_enableIRQ+0x170>)
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	0019      	movs	r1, r3
 80004ba:	2301      	movs	r3, #1
 80004bc:	408b      	lsls	r3, r1
 80004be:	0019      	movs	r1, r3
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <Button_enableIRQ+0x170>)
 80004c2:	430a      	orrs	r2, r1
 80004c4:	609a      	str	r2, [r3, #8]
		break;
 80004c6:	e022      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_FALLING:
	//activation de l'interruption sur front descendant dans FTSR
		EXTI->FTSR|=(1<<button->pin);
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <Button_enableIRQ+0x170>)
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	0019      	movs	r1, r3
 80004d2:	2301      	movs	r3, #1
 80004d4:	408b      	lsls	r3, r1
 80004d6:	0019      	movs	r1, r3
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <Button_enableIRQ+0x170>)
 80004da:	430a      	orrs	r2, r1
 80004dc:	60da      	str	r2, [r3, #12]
		break;
 80004de:	e016      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_RISING_FALLING:
		//activation de l'interruption sur front montant
		EXTI->RTSR|=(1<<button->pin);
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <Button_enableIRQ+0x170>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	0019      	movs	r1, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	0019      	movs	r1, r3
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <Button_enableIRQ+0x170>)
 80004f2:	430a      	orrs	r2, r1
 80004f4:	609a      	str	r2, [r3, #8]
		//activation de l'interruption sur front descendant
		EXTI->FTSR|=(1<<button->pin);
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <Button_enableIRQ+0x170>)
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	0019      	movs	r1, r3
 8000500:	2301      	movs	r3, #1
 8000502:	408b      	lsls	r3, r1
 8000504:	0019      	movs	r1, r3
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <Button_enableIRQ+0x170>)
 8000508:	430a      	orrs	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
		break;
 800050c:	46c0      	nop			; (mov r8, r8)
	}

	/*activer un vecteur d’interruption EXTI parmi les trois vecteurs disponibles selon le numéro de pin*/
	if (button->pin < 2) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d807      	bhi.n	8000526 <Button_enableIRQ+0x13a>
	//activer les requêtes d’interruption EXTI0_1
		NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000516:	2005      	movs	r0, #5
 8000518:	f7ff fe82 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI0_1_IRQn, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2005      	movs	r0, #5
 8000520:	f7ff fe98 	bl	8000254 <__NVIC_SetPriority>
	//activer les requêtes d’interruption EXTI4_15
		NVIC_EnableIRQ(EXTI4_15_IRQn);
		NVIC_SetPriority(EXTI4_15_IRQn, 0);
	}

    }
 8000524:	e012      	b.n	800054c <Button_enableIRQ+0x160>
	else if (button->pin < 4) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d807      	bhi.n	800053e <Button_enableIRQ+0x152>
		NVIC_EnableIRQ(EXTI2_3_IRQn);
 800052e:	2006      	movs	r0, #6
 8000530:	f7ff fe76 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8000534:	2100      	movs	r1, #0
 8000536:	2006      	movs	r0, #6
 8000538:	f7ff fe8c 	bl	8000254 <__NVIC_SetPriority>
    }
 800053c:	e006      	b.n	800054c <Button_enableIRQ+0x160>
		NVIC_EnableIRQ(EXTI4_15_IRQn);
 800053e:	2007      	movs	r0, #7
 8000540:	f7ff fe6e 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	2007      	movs	r0, #7
 8000548:	f7ff fe84 	bl	8000254 <__NVIC_SetPriority>
    }
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bdb0      	pop	{r4, r5, r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000
 800055c:	40010400 	.word	0x40010400

08000560 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 800056a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	430a      	orrs	r2, r1
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 8000576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b004      	add	sp, #16
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	21ff      	movs	r1, #255	; 0xff
 800059c:	400b      	ands	r3, r1
 800059e:	3302      	adds	r3, #2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	589b      	ldr	r3, [r3, r2]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	210f      	movs	r1, #15
 80005aa:	4091      	lsls	r1, r2
 80005ac:	000a      	movs	r2, r1
 80005ae:	43d2      	mvns	r2, r2
 80005b0:	401a      	ands	r2, r3
 80005b2:	0011      	movs	r1, r2
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	409a      	lsls	r2, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <LL_SYSCFG_SetEXTISource+0x48>)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	24ff      	movs	r4, #255	; 0xff
 80005c2:	4023      	ands	r3, r4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	3302      	adds	r3, #2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	501a      	str	r2, [r3, r0]
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b003      	add	sp, #12
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40010000 	.word	0x40010000

080005d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6819      	ldr	r1, [r3, #0]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	435b      	muls	r3, r3
 80005ec:	001a      	movs	r2, r3
 80005ee:	0013      	movs	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	43db      	mvns	r3, r3
 80005f6:	400b      	ands	r3, r1
 80005f8:	001a      	movs	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	435b      	muls	r3, r3
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	434b      	muls	r3, r1
 8000602:	431a      	orrs	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}

08000610 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68d9      	ldr	r1, [r3, #12]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	435b      	muls	r3, r3
 8000624:	001a      	movs	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	189b      	adds	r3, r3, r2
 800062c:	43db      	mvns	r3, r3
 800062e:	400b      	ands	r3, r1
 8000630:	001a      	movs	r2, r3
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	435b      	muls	r3, r3
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	434b      	muls	r3, r1
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	60da      	str	r2, [r3, #12]
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000666:	2418      	movs	r4, #24
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2308      	movs	r3, #8
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f001 f8af 	bl	80017d4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f001 f8a8 	bl	80017d4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000684:	2004      	movs	r0, #4
 8000686:	f7ff ff6b 	bl	8000560 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f7ff ff68 	bl	8000560 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff65 	bl	8000560 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2120      	movs	r1, #32
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ffd3 	bl	8000648 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xc0>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff70 	bl	800058c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <MX_GPIO_Init+0xc4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	0019      	movs	r1, r3
 80006b6:	f7ff ffab 	bl	8000610 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <MX_GPIO_Init+0xc4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	0019      	movs	r1, r3
 80006c4:	f7ff ff88 	bl	80005d8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0192      	lsls	r2, r2, #6
 80006d0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fb9e 	bl	8000e28 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2220      	movs	r2, #32
 80006f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	003a      	movs	r2, r7
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fcca 	bl	80010ac <LL_GPIO_Init>

}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b009      	add	sp, #36	; 0x24
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	00040003 	.word	0x00040003
 8000724:	50000800 	.word	0x50000800

08000728 <Led_init>:
#include "led.h"

void Led_init(LED_TypeDef *led, GPIO_TypeDef * port, uint8_t pn){
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	701a      	strb	r2, [r3, #0]

	led->gpioPort=port;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	601a      	str	r2, [r3, #0]
	led->pin=pn;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1dfa      	adds	r2, r7, #7
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	711a      	strb	r2, [r3, #4]

	//Activation de l'horloge sur le port en question

	//d�terminer le num�ro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port=(uint32_t)((uint32_t *)port - IOPPERIPH_BASE)/ (uint32_t)0x400;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	22c0      	movs	r2, #192	; 0xc0
 8000748:	0612      	lsls	r2, r2, #24
 800074a:	4694      	mov	ip, r2
 800074c:	4463      	add	r3, ip
 800074e:	0a9a      	lsrs	r2, r3, #10
 8000750:	2117      	movs	r1, #23
 8000752:	187b      	adds	r3, r7, r1
 8000754:	701a      	strb	r2, [r3, #0]
	//activation de l'hologe
	//2-activation de l'hologe
	RCC->IOPENR|=1<<nb_port;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <Led_init+0x88>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	187b      	adds	r3, r7, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2101      	movs	r1, #1
 8000760:	4099      	lsls	r1, r3
 8000762:	000b      	movs	r3, r1
 8000764:	0019      	movs	r1, r3
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <Led_init+0x88>)
 8000768:	430a      	orrs	r2, r1
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en sortie
	led->gpioPort->MODER&=~(0b11<<2*pn);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	2103      	movs	r1, #3
 800077a:	4099      	lsls	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	43db      	mvns	r3, r3
 8000780:	0019      	movs	r1, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	601a      	str	r2, [r3, #0]
	led->gpioPort->MODER|=(0b01<<2*pn);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4099      	lsls	r1, r3
 800079a:	000b      	movs	r3, r1
 800079c:	0019      	movs	r1, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b006      	add	sp, #24
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <LL_RCC_HSI_Enable+0x18>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <LL_RCC_HSI_Enable+0x18>)
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <LL_RCC_HSI_IsReady+0x1c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2204      	movs	r2, #4
 80007da:	4013      	ands	r3, r2
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d101      	bne.n	80007e4 <LL_RCC_HSI_IsReady+0x14>
 80007e0:	2301      	movs	r3, #1
 80007e2:	e000      	b.n	80007e6 <LL_RCC_HSI_IsReady+0x16>
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007fe:	4013      	ands	r3, r2
 8000800:	0019      	movs	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	021a      	lsls	r2, r3, #8
 8000806:	4b03      	ldr	r3, [pc, #12]	; (8000814 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000808:	430a      	orrs	r2, r1
 800080a:	605a      	str	r2, [r3, #4]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	ffffe0ff 	.word	0xffffe0ff

0800081c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <LL_RCC_SetSysClkSource+0x24>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	2203      	movs	r2, #3
 800082a:	4393      	bics	r3, r2
 800082c:	0019      	movs	r1, r3
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <LL_RCC_SetSysClkSource+0x24>)
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	430a      	orrs	r2, r1
 8000834:	60da      	str	r2, [r3, #12]
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40021000 	.word	0x40021000

08000844 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <LL_RCC_GetSysClkSource+0x14>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	220c      	movs	r2, #12
 800084e:	4013      	ands	r3, r2
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <LL_RCC_SetAHBPrescaler+0x24>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	22f0      	movs	r2, #240	; 0xf0
 800086a:	4393      	bics	r3, r2
 800086c:	0019      	movs	r1, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <LL_RCC_SetAHBPrescaler+0x24>)
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <LL_RCC_SetAPB1Prescaler+0x28>)
 8000892:	4013      	ands	r3, r2
 8000894:	0019      	movs	r1, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	430a      	orrs	r2, r1
 800089c:	60da      	str	r2, [r3, #12]
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	fffff8ff 	.word	0xfffff8ff

080008b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <LL_RCC_SetAPB2Prescaler+0x28>)
 80008be:	4013      	ands	r3, r2
 80008c0:	0019      	movs	r1, r3
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	60da      	str	r2, [r3, #12]
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000
 80008d8:	ffffc7ff 	.word	0xffffc7ff

080008dc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	0c12      	lsrs	r2, r2, #16
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	0011      	movs	r1, r2
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1a      	lsrs	r2, r3, #16
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008fa:	430a      	orrs	r2, r1
 80008fc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <LL_APB1_GRP1_EnableClock>:
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <LL_APB1_GRP1_EnableClock+0x28>)
 8000916:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <LL_APB1_GRP1_EnableClock+0x28>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	430a      	orrs	r2, r1
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <LL_APB1_GRP1_EnableClock+0x28>)
 8000922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <LL_APB2_GRP1_EnableClock>:
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <LL_APB2_GRP1_EnableClock+0x28>)
 8000942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LL_APB2_GRP1_EnableClock+0x28>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <LL_APB2_GRP1_EnableClock+0x28>)
 800094e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <LL_FLASH_SetLatency+0x24>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2201      	movs	r2, #1
 8000972:	4393      	bics	r3, r2
 8000974:	0019      	movs	r1, r3
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <LL_FLASH_SetLatency+0x24>)
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40022000 	.word	0x40022000

0800098c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <LL_FLASH_GetLatency+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2201      	movs	r2, #1
 8000996:	4013      	ands	r3, r2
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40022000 	.word	0x40022000

080009a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <LL_PWR_SetRegulVoltageScaling+0x28>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	0019      	movs	r1, r3
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40007000 	.word	0x40007000
 80009cc:	ffffe7ff 	.word	0xffffe7ff

080009d0 <EXTI2_3_IRQHandler>:
	if ((*last_button_state!=0) && (etat_courant_bouton==0)){
		LL_mDelay(20); //attendre 20ms
	}
	*last_button_state= etat_courant_bouton;
}
void EXTI2_3_IRQHandler(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
//s’il y une interruption en attente
	if ( EXTI->PR&(1<<3)){
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <EXTI2_3_IRQHandler+0x30>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	2208      	movs	r2, #8
 80009da:	4013      	ands	r3, r2
 80009dc:	d00c      	beq.n	80009f8 <EXTI2_3_IRQHandler+0x28>
		GPIOC->ODR^=(1<<7);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <EXTI2_3_IRQHandler+0x34>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <EXTI2_3_IRQHandler+0x34>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	404a      	eors	r2, r1
 80009e8:	615a      	str	r2, [r3, #20]
//il ne faut pas oublier de réinitialiser le flag
		EXTI->PR|=(1<<12);
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <EXTI2_3_IRQHandler+0x30>)
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <EXTI2_3_IRQHandler+0x30>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	0149      	lsls	r1, r1, #5
 80009f4:	430a      	orrs	r2, r1
 80009f6:	615a      	str	r2, [r3, #20]
	}
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40010400 	.word	0x40010400
 8000a04:	50000800 	.word	0x50000800

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff ff93 	bl	8000938 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	055b      	lsls	r3, r3, #21
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff ff78 	bl	800090c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f830 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff fe1e 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a24:	f000 f8d6 	bl	8000bd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Led_init(&led,GPIOA,5);
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05d9      	lsls	r1, r3, #23
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <main+0x60>)
 8000a2e:	2205      	movs	r2, #5
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fe79 	bl	8000728 <Led_init>
  Button_init(&bouton, GPIOC, 13, LL_GPIO_PULL_NO);
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <main+0x64>)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <main+0x68>)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	220d      	movs	r2, #13
 8000a3e:	f7ff fc77 	bl	8000330 <Button_init>
  Led_init(&led2,GPIOC,7);
 8000a42:	490a      	ldr	r1, [pc, #40]	; (8000a6c <main+0x64>)
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <main+0x6c>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fe6d 	bl	8000728 <Led_init>
  Button_init(&bouton2, GPIOB, 3, LL_GPIO_PULL_DOWN);
 8000a4e:	490a      	ldr	r1, [pc, #40]	; (8000a78 <main+0x70>)
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <main+0x74>)
 8000a52:	2302      	movs	r3, #2
 8000a54:	2203      	movs	r2, #3
 8000a56:	f7ff fc6b 	bl	8000330 <Button_init>
  Button_enableIRQ(&bouton2,LL_EXTI_TRIGGER_RISING);
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <main+0x74>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fcc4 	bl	80003ec <Button_enableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x5c>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000028 	.word	0x20000028
 8000a6c:	50000800 	.word	0x50000800
 8000a70:	20000020 	.word	0x20000020
 8000a74:	20000038 	.word	0x20000038
 8000a78:	50000400 	.word	0x50000400
 8000a7c:	20000030 	.word	0x20000030

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff ff6d 	bl	8000964 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	f7ff ff7e 	bl	800098c <LL_FLASH_GetLatency>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d1fb      	bne.n	8000a8c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ff83 	bl	80009a4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000a9e:	f7ff fe89 	bl	80007b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	f7ff fe94 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d1fa      	bne.n	8000aa4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000aae:	2010      	movs	r0, #16
 8000ab0:	f7ff fe9e 	bl	80007f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fed1 	bl	800085c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fee2 	bl	8000884 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fef5 	bl	80008b0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fea8 	bl	800081c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	f7ff feb9 	bl	8000844 <LL_RCC_GetSysClkSource>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d1fa      	bne.n	8000ace <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <SystemClock_Config+0x78>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fe38 	bl	8001750 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SystemClock_Config+0x78>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fe44 	bl	8001770 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000ae8:	23c0      	movs	r3, #192	; 0xc0
 8000aea:	031b      	lsls	r3, r3, #12
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fef5 	bl	80008dc <LL_RCC_SetUSARTClockSource>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	00f42400 	.word	0x00f42400

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <LL_APB1_GRP1_EnableClock>:
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000

08000b5c <LL_IOP_GRP1_EnableClock>:
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4013      	ands	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b004      	add	sp, #16
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <LL_USART_ConfigAsyncMode+0x2c>)
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	222a      	movs	r2, #42	; 0x2a
 8000bbe:	4393      	bics	r3, r2
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	ffffb7ff 	.word	0xffffb7ff

08000bd4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08f      	sub	sp, #60	; 0x3c
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bda:	241c      	movs	r4, #28
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	0018      	movs	r0, r3
 8000be0:	231c      	movs	r3, #28
 8000be2:	001a      	movs	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	f000 fdf5 	bl	80017d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2318      	movs	r3, #24
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f000 fdee 	bl	80017d4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	029b      	lsls	r3, r3, #10
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff97 	bl	8000b30 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff ffaa 	bl	8000b5c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2202      	movs	r2, #2
 8000c12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2203      	movs	r2, #3
 8000c18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2204      	movs	r2, #4
 8000c2a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	1d3a      	adds	r2, r7, #4
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fa39 	bl	80010ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2202      	movs	r2, #2
 8000c44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2203      	movs	r2, #3
 8000c4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fa20 	bl	80010ac <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	22e1      	movs	r2, #225	; 0xe1
 8000c70:	0252      	lsls	r2, r2, #9
 8000c72:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c74:	0021      	movs	r1, r4
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0xec>)
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	f000 fcd7 	bl	8001654 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0xec>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff7b 	bl	8000ba4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <MX_USART2_UART_Init+0xec>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ff69 	bl	8000b88 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b00f      	add	sp, #60	; 0x3c
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cee:	f7ff ff1a 	bl	8000b26 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f000 fd4b 	bl	800178c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fe87 	bl	8000a08 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d08:	08001828 	.word	0x08001828
  ldr r2, =_sbss
 8000d0c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d10:	20000040 	.word	0x20000040

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010400 	.word	0x40010400

08000d38 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <LL_EXTI_DisableIT_0_31+0x20>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <LL_EXTI_DisableIT_0_31+0x20>)
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40010400 	.word	0x40010400

08000d5c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]

}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010400 	.word	0x40010400

08000d7c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LL_EXTI_DisableEvent_0_31+0x20>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <LL_EXTI_DisableEvent_0_31+0x20>)
 8000d8e:	400a      	ands	r2, r1
 8000d90:	605a      	str	r2, [r3, #4]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40010400 	.word	0x40010400

08000da0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]

}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	609a      	str	r2, [r3, #8]

}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40010400 	.word	0x40010400

08000de4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000dee:	68d9      	ldr	r1, [r3, #12]
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	60da      	str	r2, [r3, #12]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010400 	.word	0x40010400

08000e04 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000e16:	400a      	ands	r2, r1
 8000e18:	60da      	str	r2, [r3, #12]
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40010400 	.word	0x40010400

08000e28 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <LL_EXTI_Init+0x1a>
 8000e40:	e068      	b.n	8000f14 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <LL_EXTI_Init+0x24>
 8000e4a:	e06e      	b.n	8000f2a <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d01b      	beq.n	8000e8c <LL_EXTI_Init+0x64>
 8000e54:	dc25      	bgt.n	8000ea2 <LL_EXTI_Init+0x7a>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <LL_EXTI_Init+0x38>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d00b      	beq.n	8000e76 <LL_EXTI_Init+0x4e>
 8000e5e:	e020      	b.n	8000ea2 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ff89 	bl	8000d7c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff52 	bl	8000d18 <LL_EXTI_EnableIT_0_31>
          break;
 8000e74:	e01a      	b.n	8000eac <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff ff5c 	bl	8000d38 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ff69 	bl	8000d5c <LL_EXTI_EnableEvent_0_31>
          break;
 8000e8a:	e00f      	b.n	8000eac <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff41 	bl	8000d18 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff ff5e 	bl	8000d5c <LL_EXTI_EnableEvent_0_31>
          break;
 8000ea0:	e004      	b.n	8000eac <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
          break;
 8000eaa:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	799b      	ldrb	r3, [r3, #6]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d03a      	beq.n	8000f2a <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d01b      	beq.n	8000ef4 <LL_EXTI_Init+0xcc>
 8000ebc:	dc25      	bgt.n	8000f0a <LL_EXTI_Init+0xe2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d002      	beq.n	8000ec8 <LL_EXTI_Init+0xa0>
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d00b      	beq.n	8000ede <LL_EXTI_Init+0xb6>
 8000ec6:	e020      	b.n	8000f0a <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff99 	bl	8000e04 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff62 	bl	8000da0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000edc:	e026      	b.n	8000f2c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff6c 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff79 	bl	8000de4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000ef2:	e01b      	b.n	8000f2c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ff51 	bl	8000da0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff ff6e 	bl	8000de4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f08:	e010      	b.n	8000f2c <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
            break;
 8000f12:	e00b      	b.n	8000f2c <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ff0d 	bl	8000d38 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff2a 	bl	8000d7c <LL_EXTI_DisableEvent_0_31>
 8000f28:	e000      	b.n	8000f2c <LL_EXTI_Init+0x104>
      }
 8000f2a:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <LL_GPIO_SetPinMode>:
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	435b      	muls	r3, r3
 8000f4e:	001a      	movs	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	43db      	mvns	r3, r3
 8000f58:	400b      	ands	r3, r1
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	435b      	muls	r3, r3
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	434b      	muls	r3, r1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LL_GPIO_SetPinOutputType>:
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	401a      	ands	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	434b      	muls	r3, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	605a      	str	r2, [r3, #4]
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b004      	add	sp, #16
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <LL_GPIO_SetPinSpeed>:
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6899      	ldr	r1, [r3, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	435b      	muls	r3, r3
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	0013      	movs	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	189b      	adds	r3, r3, r2
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	400b      	ands	r3, r1
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	435b      	muls	r3, r3
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	434b      	muls	r3, r1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	609a      	str	r2, [r3, #8]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <LL_GPIO_SetPinPull>:
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68d9      	ldr	r1, [r3, #12]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	435b      	muls	r3, r3
 8000fe8:	001a      	movs	r2, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	189b      	adds	r3, r3, r2
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	435b      	muls	r3, r3
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	434b      	muls	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	60da      	str	r2, [r3, #12]
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b004      	add	sp, #16
 800100a:	bd80      	pop	{r7, pc}

0800100c <LL_GPIO_SetAFPin_0_7>:
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a19      	ldr	r1, [r3, #32]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	435b      	muls	r3, r3
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	4353      	muls	r3, r2
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	435a      	muls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	43db      	mvns	r3, r3
 8001030:	400b      	ands	r3, r1
 8001032:	001a      	movs	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	435b      	muls	r3, r3
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	434b      	muls	r3, r1
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	434b      	muls	r3, r1
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	434b      	muls	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	621a      	str	r2, [r3, #32]
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <LL_GPIO_SetAFPin_8_15>:
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	0a12      	lsrs	r2, r2, #8
 800106a:	4353      	muls	r3, r2
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	0a12      	lsrs	r2, r2, #8
 8001070:	4353      	muls	r3, r2
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	0a12      	lsrs	r2, r2, #8
 8001076:	435a      	muls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	43db      	mvns	r3, r3
 8001080:	400b      	ands	r3, r1
 8001082:	001a      	movs	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	0a09      	lsrs	r1, r1, #8
 800108c:	434b      	muls	r3, r1
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	0a09      	lsrs	r1, r1, #8
 8001092:	434b      	muls	r3, r1
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	0a09      	lsrs	r1, r1, #8
 8001098:	434b      	muls	r3, r1
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	434b      	muls	r3, r1
 800109e:	431a      	orrs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b004      	add	sp, #16
 80010aa:	bd80      	pop	{r7, pc}

080010ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80010be:	e048      	b.n	8001152 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d003      	beq.n	80010e6 <LL_GPIO_Init+0x3a>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d10e      	bne.n	8001104 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ff37 	bl	8000f72 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff ff61 	bl	8000fd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d111      	bne.n	800113e <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d807      	bhi.n	8001130 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff6f 	bl	800100c <LL_GPIO_SetAFPin_0_7>
 800112e:	e006      	b.n	800113e <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff8a 	bl	8001052 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff fef7 	bl	8000f3a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	40da      	lsrs	r2, r3
 800115a:	1e13      	subs	r3, r2, #0
 800115c:	d1b0      	bne.n	80010c0 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800115e:	2300      	movs	r3, #0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}

08001168 <LL_RCC_HSI_IsReady>:
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_RCC_HSI_IsReady+0x1c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	2b04      	cmp	r3, #4
 8001176:	d101      	bne.n	800117c <LL_RCC_HSI_IsReady+0x14>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_RCC_HSI_IsReady+0x16>
 800117c:	2300      	movs	r3, #0
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000

08001188 <LL_RCC_LSE_IsReady>:
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <LL_RCC_LSE_IsReady+0x24>)
 800118e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	401a      	ands	r2, r3
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	429a      	cmp	r2, r3
 800119c:	d101      	bne.n	80011a2 <LL_RCC_LSE_IsReady+0x1a>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_RCC_LSE_IsReady+0x1c>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_RCC_MSI_GetRange>:
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <LL_RCC_MSI_GetRange+0x14>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	23e0      	movs	r3, #224	; 0xe0
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	4013      	ands	r3, r2
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <LL_RCC_GetSysClkSource>:
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <LL_RCC_GetSysClkSource+0x14>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	220c      	movs	r2, #12
 80011d2:	4013      	ands	r3, r2
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021000 	.word	0x40021000

080011e0 <LL_RCC_GetAHBPrescaler>:
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <LL_RCC_GetAHBPrescaler+0x14>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	22f0      	movs	r2, #240	; 0xf0
 80011ea:	4013      	ands	r3, r2
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	40021000 	.word	0x40021000

080011f8 <LL_RCC_GetAPB1Prescaler>:
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <LL_RCC_GetAPB1Prescaler+0x14>)
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	23e0      	movs	r3, #224	; 0xe0
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4013      	ands	r3, r2
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000

08001210 <LL_RCC_GetAPB2Prescaler>:
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	23e0      	movs	r3, #224	; 0xe0
 800121a:	019b      	lsls	r3, r3, #6
 800121c:	4013      	ands	r3, r2
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000

08001228 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <LL_RCC_GetUSARTClockSource+0x20>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	401a      	ands	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	4313      	orrs	r3, r2
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40021000 	.word	0x40021000

0800124c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <LL_RCC_PLL_GetMainSource+0x14>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	4013      	ands	r3, r2
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	23f0      	movs	r3, #240	; 0xf0
 800126e:	039b      	lsls	r3, r3, #14
 8001270:	4013      	ands	r3, r2
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000

0800127c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <LL_RCC_PLL_GetDivider+0x14>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	4013      	ands	r3, r2
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2210      	movs	r2, #16
 800129e:	4013      	ands	r3, r2
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d101      	bne.n	80012a8 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d139      	bne.n	800133a <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ffad 	bl	8001228 <LL_RCC_GetUSARTClockSource>
 80012ce:	0003      	movs	r3, r0
 80012d0:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <LL_RCC_GetUSARTClockFreq+0x120>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01c      	beq.n	8001310 <LL_RCC_GetUSARTClockFreq+0x5c>
 80012d6:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <LL_RCC_GetUSARTClockFreq+0x120>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d821      	bhi.n	8001320 <LL_RCC_GetUSARTClockFreq+0x6c>
 80012dc:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <LL_RCC_GetUSARTClockFreq+0x124>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d003      	beq.n	80012ea <LL_RCC_GetUSARTClockFreq+0x36>
 80012e2:	4a3e      	ldr	r2, [pc, #248]	; (80013dc <LL_RCC_GetUSARTClockFreq+0x128>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d005      	beq.n	80012f4 <LL_RCC_GetUSARTClockFreq+0x40>
 80012e8:	e01a      	b.n	8001320 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80012ea:	f000 f883 	bl	80013f4 <RCC_GetSystemClockFreq>
 80012ee:	0003      	movs	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
        break;
 80012f2:	e027      	b.n	8001344 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80012f4:	f7ff ff38 	bl	8001168 <LL_RCC_HSI_IsReady>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d020      	beq.n	800133e <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80012fc:	f7ff ffca 	bl	8001294 <LL_RCC_IsActiveFlag_HSIDIV>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d002      	beq.n	800130a <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8001306:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001308:	e019      	b.n	800133e <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <LL_RCC_GetUSARTClockFreq+0x130>)
 800130c:	60fb      	str	r3, [r7, #12]
        break;
 800130e:	e016      	b.n	800133e <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001310:	f7ff ff3a 	bl	8001188 <LL_RCC_LSE_IsReady>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d014      	beq.n	8001342 <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800131e:	e010      	b.n	8001342 <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001320:	f000 f868 	bl	80013f4 <RCC_GetSystemClockFreq>
 8001324:	0003      	movs	r3, r0
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8a8 	bl	800147c <RCC_GetHCLKClockFreq>
 800132c:	0003      	movs	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f8ce 	bl	80014d0 <RCC_GetPCLK2ClockFreq>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
        break;
 8001338:	e004      	b.n	8001344 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	e002      	b.n	8001344 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	e000      	b.n	8001344 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001342:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d139      	bne.n	80013be <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff6b 	bl	8001228 <LL_RCC_GetUSARTClockSource>
 8001352:	0003      	movs	r3, r0
 8001354:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01c      	beq.n	8001394 <LL_RCC_GetUSARTClockFreq+0xe0>
 800135a:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <LL_RCC_GetUSARTClockFreq+0x134>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d821      	bhi.n	80013a4 <LL_RCC_GetUSARTClockFreq+0xf0>
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <LL_RCC_GetUSARTClockFreq+0x138>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d003      	beq.n	800136e <LL_RCC_GetUSARTClockFreq+0xba>
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <LL_RCC_GetUSARTClockFreq+0x13c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d005      	beq.n	8001378 <LL_RCC_GetUSARTClockFreq+0xc4>
 800136c:	e01a      	b.n	80013a4 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800136e:	f000 f841 	bl	80013f4 <RCC_GetSystemClockFreq>
 8001372:	0003      	movs	r3, r0
 8001374:	60fb      	str	r3, [r7, #12]
        break;
 8001376:	e027      	b.n	80013c8 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001378:	f7ff fef6 	bl	8001168 <LL_RCC_HSI_IsReady>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d020      	beq.n	80013c2 <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001380:	f7ff ff88 	bl	8001294 <LL_RCC_IsActiveFlag_HSIDIV>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d002      	beq.n	800138e <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800138a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 800138c:	e019      	b.n	80013c2 <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <LL_RCC_GetUSARTClockFreq+0x130>)
 8001390:	60fb      	str	r3, [r7, #12]
        break;
 8001392:	e016      	b.n	80013c2 <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001394:	f7ff fef8 	bl	8001188 <LL_RCC_LSE_IsReady>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d014      	beq.n	80013c6 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80013a2:	e010      	b.n	80013c6 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80013a4:	f000 f826 	bl	80013f4 <RCC_GetSystemClockFreq>
 80013a8:	0003      	movs	r3, r0
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f866 	bl	800147c <RCC_GetHCLKClockFreq>
 80013b0:	0003      	movs	r3, r0
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f878 	bl	80014a8 <RCC_GetPCLK1ClockFreq>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
        break;
 80013bc:	e004      	b.n	80013c8 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	e002      	b.n	80013c8 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	e000      	b.n	80013c8 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80013c6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	00030003 	.word	0x00030003
 80013d8:	00030001 	.word	0x00030001
 80013dc:	00030002 	.word	0x00030002
 80013e0:	003d0900 	.word	0x003d0900
 80013e4:	00f42400 	.word	0x00f42400
 80013e8:	000c000c 	.word	0x000c000c
 80013ec:	000c0004 	.word	0x000c0004
 80013f0:	000c0008 	.word	0x000c0008

080013f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80013fa:	f7ff fee5 	bl	80011c8 <LL_RCC_GetSysClkSource>
 80013fe:	0003      	movs	r3, r0
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d020      	beq.n	8001446 <RCC_GetSystemClockFreq+0x52>
 8001404:	d824      	bhi.n	8001450 <RCC_GetSystemClockFreq+0x5c>
 8001406:	2b08      	cmp	r3, #8
 8001408:	d01a      	beq.n	8001440 <RCC_GetSystemClockFreq+0x4c>
 800140a:	d821      	bhi.n	8001450 <RCC_GetSystemClockFreq+0x5c>
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <RCC_GetSystemClockFreq+0x22>
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00b      	beq.n	800142c <RCC_GetSystemClockFreq+0x38>
 8001414:	e01c      	b.n	8001450 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001416:	f7ff fecb 	bl	80011b0 <LL_RCC_MSI_GetRange>
 800141a:	0003      	movs	r3, r0
 800141c:	0b5b      	lsrs	r3, r3, #13
 800141e:	3301      	adds	r3, #1
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	607b      	str	r3, [r7, #4]
      break;
 800142a:	e01c      	b.n	8001466 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800142c:	f7ff ff32 	bl	8001294 <LL_RCC_IsActiveFlag_HSIDIV>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d002      	beq.n	800143a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <RCC_GetSystemClockFreq+0x7c>)
 8001436:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001438:	e015      	b.n	8001466 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <RCC_GetSystemClockFreq+0x80>)
 800143c:	607b      	str	r3, [r7, #4]
      break;
 800143e:	e012      	b.n	8001466 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <RCC_GetSystemClockFreq+0x84>)
 8001442:	607b      	str	r3, [r7, #4]
      break;
 8001444:	e00f      	b.n	8001466 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001446:	f000 f857 	bl	80014f8 <RCC_PLL_GetFreqDomain_SYS>
 800144a:	0003      	movs	r3, r0
 800144c:	607b      	str	r3, [r7, #4]
      break;
 800144e:	e00a      	b.n	8001466 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001450:	f7ff feae 	bl	80011b0 <LL_RCC_MSI_GetRange>
 8001454:	0003      	movs	r3, r0
 8001456:	0b5b      	lsrs	r3, r3, #13
 8001458:	3301      	adds	r3, #1
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0212      	lsls	r2, r2, #8
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	607b      	str	r3, [r7, #4]
      break;
 8001464:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	003d0900 	.word	0x003d0900
 8001474:	00f42400 	.word	0x00f42400
 8001478:	007a1200 	.word	0x007a1200

0800147c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001484:	f7ff feac 	bl	80011e0 <LL_RCC_GetAHBPrescaler>
 8001488:	0003      	movs	r3, r0
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	220f      	movs	r2, #15
 800148e:	4013      	ands	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <RCC_GetHCLKClockFreq+0x28>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	001a      	movs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	40d3      	lsrs	r3, r2
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	080017fc 	.word	0x080017fc

080014a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80014b0:	f7ff fea2 	bl	80011f8 <LL_RCC_GetAPB1Prescaler>
 80014b4:	0003      	movs	r3, r0
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <RCC_GetPCLK1ClockFreq+0x24>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	001a      	movs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	40d3      	lsrs	r3, r2
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	0800180c 	.word	0x0800180c

080014d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80014d8:	f7ff fe9a 	bl	8001210 <LL_RCC_GetAPB2Prescaler>
 80014dc:	0003      	movs	r3, r0
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	001a      	movs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	40d3      	lsrs	r3, r2
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	0800180c 	.word	0x0800180c

080014f8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80014fe:	f7ff fea5 	bl	800124c <LL_RCC_PLL_GetMainSource>
 8001502:	0003      	movs	r3, r0
 8001504:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800150c:	f7ff fec2 	bl	8001294 <LL_RCC_IsActiveFlag_HSIDIV>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d002      	beq.n	800151a <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001516:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001518:	e005      	b.n	8001526 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800151c:	607b      	str	r3, [r7, #4]
      break;
 800151e:	e002      	b.n	8001526 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001522:	607b      	str	r3, [r7, #4]
      break;
 8001524:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001526:	f7ff fe9d 	bl	8001264 <LL_RCC_PLL_GetMultiplicator>
 800152a:	0003      	movs	r3, r0
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	001a      	movs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4353      	muls	r3, r2
 8001538:	001c      	movs	r4, r3
 800153a:	f7ff fe9f 	bl	800127c <LL_RCC_PLL_GetDivider>
 800153e:	0003      	movs	r3, r0
 8001540:	0d9b      	lsrs	r3, r3, #22
 8001542:	3301      	adds	r3, #1
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fdde 	bl	8000108 <__udivsi3>
 800154c:	0003      	movs	r3, r0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b003      	add	sp, #12
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	003d0900 	.word	0x003d0900
 800155c:	00f42400 	.word	0x00f42400
 8001560:	007a1200 	.word	0x007a1200
 8001564:	08001814 	.word	0x08001814

08001568 <LL_USART_IsEnabled>:
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	4013      	ands	r3, r2
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <LL_USART_IsEnabled+0x18>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_USART_IsEnabled+0x1a>
 8001580:	2300      	movs	r3, #0
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <LL_USART_SetStopBitsLength>:
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <LL_USART_SetStopBitsLength+0x24>)
 800159c:	401a      	ands	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	605a      	str	r2, [r3, #4]
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b002      	add	sp, #8
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	ffffcfff 	.word	0xffffcfff

080015b4 <LL_USART_SetHWFlowCtrl>:
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <LL_USART_SetHWFlowCtrl+0x24>)
 80015c4:	401a      	ands	r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	fffffcff 	.word	0xfffffcff

080015dc <LL_USART_SetBaudRate>:
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d11c      	bne.n	800162e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	005a      	lsls	r2, r3, #1
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	0018      	movs	r0, r3
 8001602:	f7fe fd81 	bl	8000108 <__udivsi3>
 8001606:	0003      	movs	r3, r0
 8001608:	b29b      	uxth	r3, r3
 800160a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <LL_USART_SetBaudRate+0x74>)
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	001a      	movs	r2, r3
 800161c:	2307      	movs	r3, #7
 800161e:	4013      	ands	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	60da      	str	r2, [r3, #12]
}
 800162c:	e00c      	b.n	8001648 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	085a      	lsrs	r2, r3, #1
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	0018      	movs	r0, r3
 800163a:	f7fe fd65 	bl	8000108 <__udivsi3>
 800163e:	0003      	movs	r3, r0
 8001640:	b29b      	uxth	r3, r3
 8001642:	001a      	movs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	60da      	str	r2, [r3, #12]
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b006      	add	sp, #24
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0000fff0 	.word	0x0000fff0

08001654 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ff7b 	bl	8001568 <LL_USART_IsEnabled>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d145      	bne.n	8001702 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <LL_USART_Init+0xbc>)
 800167c:	401a      	ands	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4319      	orrs	r1, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4319      	orrs	r1, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	430b      	orrs	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0011      	movs	r1, r2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff ff72 	bl	800158c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff ff7f 	bl	80015b4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <LL_USART_Init+0xc0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d105      	bne.n	80016ca <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff fdf8 	bl	80012b4 <LL_RCC_GetUSARTClockFreq>
 80016c4:	0003      	movs	r3, r0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e008      	b.n	80016dc <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <LL_USART_Init+0xc4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d104      	bne.n	80016dc <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80016d2:	200c      	movs	r0, #12
 80016d4:	f7ff fdee 	bl	80012b4 <LL_RCC_GetUSARTClockFreq>
 80016d8:	0003      	movs	r3, r0
 80016da:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff6d 	bl	80015dc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001702:	230f      	movs	r3, #15
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}
 8001710:	efff69f3 	.word	0xefff69f3
 8001714:	40013800 	.word	0x40013800
 8001718:	40004400 	.word	0x40004400

0800171c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe fced 	bl	8000108 <__udivsi3>
 800172e:	0003      	movs	r3, r0
 8001730:	001a      	movs	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <LL_InitTick+0x30>)
 8001734:	3a01      	subs	r2, #1
 8001736:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <LL_InitTick+0x30>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <LL_InitTick+0x30>)
 8001740:	2205      	movs	r2, #5
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}
 800174c:	e000e010 	.word	0xe000e010

08001750 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001758:	23fa      	movs	r3, #250	; 0xfa
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffdb 	bl	800171c <LL_InitTick>
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <LL_SetSystemCoreClock+0x18>)
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	20000000 	.word	0x20000000

0800178c <__libc_init_array>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	2600      	movs	r6, #0
 8001790:	4d0c      	ldr	r5, [pc, #48]	; (80017c4 <__libc_init_array+0x38>)
 8001792:	4c0d      	ldr	r4, [pc, #52]	; (80017c8 <__libc_init_array+0x3c>)
 8001794:	1b64      	subs	r4, r4, r5
 8001796:	10a4      	asrs	r4, r4, #2
 8001798:	42a6      	cmp	r6, r4
 800179a:	d109      	bne.n	80017b0 <__libc_init_array+0x24>
 800179c:	2600      	movs	r6, #0
 800179e:	f000 f821 	bl	80017e4 <_init>
 80017a2:	4d0a      	ldr	r5, [pc, #40]	; (80017cc <__libc_init_array+0x40>)
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <__libc_init_array+0x44>)
 80017a6:	1b64      	subs	r4, r4, r5
 80017a8:	10a4      	asrs	r4, r4, #2
 80017aa:	42a6      	cmp	r6, r4
 80017ac:	d105      	bne.n	80017ba <__libc_init_array+0x2e>
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
 80017b0:	00b3      	lsls	r3, r6, #2
 80017b2:	58eb      	ldr	r3, [r5, r3]
 80017b4:	4798      	blx	r3
 80017b6:	3601      	adds	r6, #1
 80017b8:	e7ee      	b.n	8001798 <__libc_init_array+0xc>
 80017ba:	00b3      	lsls	r3, r6, #2
 80017bc:	58eb      	ldr	r3, [r5, r3]
 80017be:	4798      	blx	r3
 80017c0:	3601      	adds	r6, #1
 80017c2:	e7f2      	b.n	80017aa <__libc_init_array+0x1e>
 80017c4:	08001820 	.word	0x08001820
 80017c8:	08001820 	.word	0x08001820
 80017cc:	08001820 	.word	0x08001820
 80017d0:	08001824 	.word	0x08001824

080017d4 <memset>:
 80017d4:	0003      	movs	r3, r0
 80017d6:	1882      	adds	r2, r0, r2
 80017d8:	4293      	cmp	r3, r2
 80017da:	d100      	bne.n	80017de <memset+0xa>
 80017dc:	4770      	bx	lr
 80017de:	7019      	strb	r1, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	e7f9      	b.n	80017d8 <memset+0x4>

080017e4 <_init>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr

080017f0 <_fini>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr
