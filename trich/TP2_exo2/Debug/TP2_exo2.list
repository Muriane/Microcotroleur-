
TP2_exo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019dc  080019dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080019dc  080019dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019dc  080019dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080019e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  080019e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080019e8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ad6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146b  00000000  00000000  00024b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00025f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00026580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dca0  00000000  00000000  00026ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005523  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047629  00000000  00000000  00039c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000812b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a0  00000000  00000000  00081308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080019a0 	.word	0x080019a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080019a0 	.word	0x080019a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b7f      	cmp	r3, #127	; 0x7f
 8000232:	d809      	bhi.n	8000248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	001a      	movs	r2, r3
 800023a:	231f      	movs	r3, #31
 800023c:	401a      	ands	r2, r3
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_EnableIRQ+0x30>)
 8000240:	2101      	movs	r1, #1
 8000242:	4091      	lsls	r1, r2
 8000244:	000a      	movs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
  }
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b7f      	cmp	r3, #127	; 0x7f
 8000268:	d828      	bhi.n	80002bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800026a:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <__NVIC_SetPriority+0xd4>)
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b25b      	sxtb	r3, r3
 8000272:	089b      	lsrs	r3, r3, #2
 8000274:	33c0      	adds	r3, #192	; 0xc0
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	589b      	ldr	r3, [r3, r2]
 800027a:	1dfa      	adds	r2, r7, #7
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	0011      	movs	r1, r2
 8000280:	2203      	movs	r2, #3
 8000282:	400a      	ands	r2, r1
 8000284:	00d2      	lsls	r2, r2, #3
 8000286:	21ff      	movs	r1, #255	; 0xff
 8000288:	4091      	lsls	r1, r2
 800028a:	000a      	movs	r2, r1
 800028c:	43d2      	mvns	r2, r2
 800028e:	401a      	ands	r2, r3
 8000290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	019b      	lsls	r3, r3, #6
 8000296:	22ff      	movs	r2, #255	; 0xff
 8000298:	401a      	ands	r2, r3
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	2303      	movs	r3, #3
 80002a2:	4003      	ands	r3, r0
 80002a4:	00db      	lsls	r3, r3, #3
 80002a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <__NVIC_SetPriority+0xd4>)
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	089b      	lsrs	r3, r3, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	33c0      	adds	r3, #192	; 0xc0
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ba:	e031      	b.n	8000320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4a1b      	ldr	r2, [pc, #108]	; (800032c <__NVIC_SetPriority+0xd8>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	230f      	movs	r3, #15
 80002c6:	400b      	ands	r3, r1
 80002c8:	3b08      	subs	r3, #8
 80002ca:	089b      	lsrs	r3, r3, #2
 80002cc:	3306      	adds	r3, #6
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	1dfa      	adds	r2, r7, #7
 80002d8:	7812      	ldrb	r2, [r2, #0]
 80002da:	0011      	movs	r1, r2
 80002dc:	2203      	movs	r2, #3
 80002de:	400a      	ands	r2, r1
 80002e0:	00d2      	lsls	r2, r2, #3
 80002e2:	21ff      	movs	r1, #255	; 0xff
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	22ff      	movs	r2, #255	; 0xff
 80002f4:	401a      	ands	r2, r3
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	2303      	movs	r3, #3
 80002fe:	4003      	ands	r3, r0
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <__NVIC_SetPriority+0xd8>)
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	001c      	movs	r4, r3
 800030c:	230f      	movs	r3, #15
 800030e:	4023      	ands	r3, r4
 8000310:	3b08      	subs	r3, #8
 8000312:	089b      	lsrs	r3, r3, #2
 8000314:	430a      	orrs	r2, r1
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18c3      	adds	r3, r0, r3
 800031c:	3304      	adds	r3, #4
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b003      	add	sp, #12
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <Button_init>:
#include "button.h"
#include "stm32l0xx_ll_exti.h"

void Button_init(BUTTON_TypeDef *button, GPIO_TypeDef * port, uint8_t pn,
		uint8_t pl) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	0019      	movs	r1, r3
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	1dbb      	adds	r3, r7, #6
 8000342:	1c0a      	adds	r2, r1, #0
 8000344:	701a      	strb	r2, [r3, #0]

	button->gpioPort = port;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
	button->pin = pn;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	1dfa      	adds	r2, r7, #7
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	711a      	strb	r2, [r3, #4]
	button->pull = pl;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1dba      	adds	r2, r7, #6
 8000358:	7812      	ldrb	r2, [r2, #0]
 800035a:	715a      	strb	r2, [r3, #5]

	//Activation de l'horloge sur le port en question
	//1-déterminer le numéro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port = ((uint32_t) port - IOPPERIPH_BASE) / 0x400;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	22b0      	movs	r2, #176	; 0xb0
 8000360:	0612      	lsls	r2, r2, #24
 8000362:	4694      	mov	ip, r2
 8000364:	4463      	add	r3, ip
 8000366:	0a9a      	lsrs	r2, r3, #10
 8000368:	2117      	movs	r1, #23
 800036a:	187b      	adds	r3, r7, r1
 800036c:	701a      	strb	r2, [r3, #0]
	//2-activation de l'hologe
	RCC->IOPENR |= 1 << nb_port;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <Button_init+0xb8>)
 8000370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000372:	187b      	adds	r3, r7, r1
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2101      	movs	r1, #1
 8000378:	4099      	lsls	r1, r3
 800037a:	000b      	movs	r3, r1
 800037c:	0019      	movs	r1, r3
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <Button_init+0xb8>)
 8000380:	430a      	orrs	r2, r1
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en entrée
	button->gpioPort->MODER &= ~(0b11 << 2 * pn);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	2103      	movs	r1, #3
 8000392:	4099      	lsls	r1, r3
 8000394:	000b      	movs	r3, r1
 8000396:	43db      	mvns	r3, r3
 8000398:	0019      	movs	r1, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	400a      	ands	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]

	//configuration du type de pull
	button->gpioPort->PUPDR &= ~(0b11 << 2 * pn);
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	68da      	ldr	r2, [r3, #12]
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	2103      	movs	r1, #3
 80003b0:	4099      	lsls	r1, r3
 80003b2:	000b      	movs	r3, r1
 80003b4:	43db      	mvns	r3, r3
 80003b6:	0019      	movs	r1, r3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	400a      	ands	r2, r1
 80003be:	60da      	str	r2, [r3, #12]
	button->gpioPort->PUPDR |= (pl << 2 * pn);
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	1dbb      	adds	r3, r7, #6
 80003c8:	7819      	ldrb	r1, [r3, #0]
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4099      	lsls	r1, r3
 80003d2:	000b      	movs	r3, r1
 80003d4:	0019      	movs	r1, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	430a      	orrs	r2, r1
 80003dc:	60da      	str	r2, [r3, #12]
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b006      	add	sp, #24
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	40021000 	.word	0x40021000

080003ec <Button_enableIRQ>:
	else{
			return 0;
	}
}

void Button_enableIRQ(BUTTON_TypeDef *button, uint8_t trigger) {
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cfb      	adds	r3, r7, #3
 80003f8:	701a      	strb	r2, [r3, #0]

	//activation de l'interruption externe
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003fa:	4b56      	ldr	r3, [pc, #344]	; (8000554 <Button_enableIRQ+0x168>)
 80003fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fe:	4b55      	ldr	r3, [pc, #340]	; (8000554 <Button_enableIRQ+0x168>)
 8000400:	2101      	movs	r1, #1
 8000402:	430a      	orrs	r2, r1
 8000404:	635a      	str	r2, [r3, #52]	; 0x34

	/*chercher à quel registre EXTI de SYSCFG on doit accéder parmi les quatre disponibles*/
	//1-détermination du numéro d'EXTI
	uint8_t nb_EXTI = button->pin / 4;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791a      	ldrb	r2, [r3, #4]
 800040a:	240f      	movs	r4, #15
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0892      	lsrs	r2, r2, #2
 8000410:	701a      	strb	r2, [r3, #0]
	//2-déterminer le numéro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port = ((uint32_t) button->gpioPort - IOPPERIPH_BASE) / 0x400;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	22b0      	movs	r2, #176	; 0xb0
 8000418:	0612      	lsls	r2, r2, #24
 800041a:	4694      	mov	ip, r2
 800041c:	4463      	add	r3, ip
 800041e:	0a9a      	lsrs	r2, r3, #10
 8000420:	250e      	movs	r5, #14
 8000422:	197b      	adds	r3, r7, r5
 8000424:	701a      	strb	r2, [r3, #0]
	//3-configuration du registre EXTI de SYSCFG
	SYSCFG->EXTICR[nb_EXTI] &= ~(0b1111 << 4 * (button->pin % 4));
 8000426:	4a4c      	ldr	r2, [pc, #304]	; (8000558 <Button_enableIRQ+0x16c>)
 8000428:	193b      	adds	r3, r7, r4
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3302      	adds	r3, #2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	589a      	ldr	r2, [r3, r2]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	0019      	movs	r1, r3
 8000438:	2303      	movs	r3, #3
 800043a:	400b      	ands	r3, r1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	4099      	lsls	r1, r3
 8000442:	000b      	movs	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	0018      	movs	r0, r3
 8000448:	4943      	ldr	r1, [pc, #268]	; (8000558 <Button_enableIRQ+0x16c>)
 800044a:	193b      	adds	r3, r7, r4
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4002      	ands	r2, r0
 8000450:	3302      	adds	r3, #2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	505a      	str	r2, [r3, r1]
	SYSCFG->EXTICR[nb_EXTI] |= (nb_port << 4 * (button->pin % 4));
 8000456:	4a40      	ldr	r2, [pc, #256]	; (8000558 <Button_enableIRQ+0x16c>)
 8000458:	193b      	adds	r3, r7, r4
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3302      	adds	r3, #2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	589a      	ldr	r2, [r3, r2]
 8000462:	197b      	adds	r3, r7, r5
 8000464:	7819      	ldrb	r1, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	0018      	movs	r0, r3
 800046c:	2303      	movs	r3, #3
 800046e:	4003      	ands	r3, r0
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4099      	lsls	r1, r3
 8000474:	000b      	movs	r3, r1
 8000476:	0018      	movs	r0, r3
 8000478:	4937      	ldr	r1, [pc, #220]	; (8000558 <Button_enableIRQ+0x16c>)
 800047a:	193b      	adds	r3, r7, r4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	4302      	orrs	r2, r0
 8000480:	3302      	adds	r3, #2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	505a      	str	r2, [r3, r1]


	//activation d'EXTI dans IMR pour qu'elle ne soit pas masquée
	EXTI->IMR |= (1 << button->pin); 
 8000486:	4b35      	ldr	r3, [pc, #212]	; (800055c <Button_enableIRQ+0x170>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	0019      	movs	r1, r3
 8000490:	2301      	movs	r3, #1
 8000492:	408b      	lsls	r3, r1
 8000494:	0019      	movs	r1, r3
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <Button_enableIRQ+0x170>)
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

        //activation du type du trigger (front montant/descendant)
	switch (trigger) {
 800049c:	1cfb      	adds	r3, r7, #3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d01d      	beq.n	80004e0 <Button_enableIRQ+0xf4>
 80004a4:	dc33      	bgt.n	800050e <Button_enableIRQ+0x122>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d002      	beq.n	80004b0 <Button_enableIRQ+0xc4>
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00c      	beq.n	80004c8 <Button_enableIRQ+0xdc>
 80004ae:	e02e      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_RISING:
	//activation de l'interruption sur front montant dans RTSR
		EXTI->RTSR|=(1<<button->pin);
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <Button_enableIRQ+0x170>)
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	0019      	movs	r1, r3
 80004ba:	2301      	movs	r3, #1
 80004bc:	408b      	lsls	r3, r1
 80004be:	0019      	movs	r1, r3
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <Button_enableIRQ+0x170>)
 80004c2:	430a      	orrs	r2, r1
 80004c4:	609a      	str	r2, [r3, #8]
		break;
 80004c6:	e022      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_FALLING:
	//activation de l'interruption sur front descendant dans FTSR
		EXTI->FTSR|=(1<<button->pin);
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <Button_enableIRQ+0x170>)
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	0019      	movs	r1, r3
 80004d2:	2301      	movs	r3, #1
 80004d4:	408b      	lsls	r3, r1
 80004d6:	0019      	movs	r1, r3
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <Button_enableIRQ+0x170>)
 80004da:	430a      	orrs	r2, r1
 80004dc:	60da      	str	r2, [r3, #12]
		break;
 80004de:	e016      	b.n	800050e <Button_enableIRQ+0x122>
	case LL_EXTI_TRIGGER_RISING_FALLING:
		//activation de l'interruption sur front montant
		EXTI->RTSR|=(1<<button->pin);
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <Button_enableIRQ+0x170>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	0019      	movs	r1, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	0019      	movs	r1, r3
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <Button_enableIRQ+0x170>)
 80004f2:	430a      	orrs	r2, r1
 80004f4:	609a      	str	r2, [r3, #8]
		//activation de l'interruption sur front descendant
		EXTI->FTSR|=(1<<button->pin);
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <Button_enableIRQ+0x170>)
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	0019      	movs	r1, r3
 8000500:	2301      	movs	r3, #1
 8000502:	408b      	lsls	r3, r1
 8000504:	0019      	movs	r1, r3
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <Button_enableIRQ+0x170>)
 8000508:	430a      	orrs	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
		break;
 800050c:	46c0      	nop			; (mov r8, r8)
	}

	/*activer un vecteur d’interruption EXTI parmi les trois vecteurs disponibles selon le numéro de pin*/
	if (button->pin < 2) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d807      	bhi.n	8000526 <Button_enableIRQ+0x13a>
	//activer les requêtes d’interruption EXTI0_1
		NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000516:	2005      	movs	r0, #5
 8000518:	f7ff fe82 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI0_1_IRQn, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2005      	movs	r0, #5
 8000520:	f7ff fe98 	bl	8000254 <__NVIC_SetPriority>
	//activer les requêtes d’interruption EXTI4_15
		NVIC_EnableIRQ(EXTI4_15_IRQn);
		NVIC_SetPriority(EXTI4_15_IRQn, 0);
	}

    }
 8000524:	e012      	b.n	800054c <Button_enableIRQ+0x160>
	else if (button->pin < 4) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d807      	bhi.n	800053e <Button_enableIRQ+0x152>
		NVIC_EnableIRQ(EXTI2_3_IRQn);
 800052e:	2006      	movs	r0, #6
 8000530:	f7ff fe76 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8000534:	2100      	movs	r1, #0
 8000536:	2006      	movs	r0, #6
 8000538:	f7ff fe8c 	bl	8000254 <__NVIC_SetPriority>
    }
 800053c:	e006      	b.n	800054c <Button_enableIRQ+0x160>
		NVIC_EnableIRQ(EXTI4_15_IRQn);
 800053e:	2007      	movs	r0, #7
 8000540:	f7ff fe6e 	bl	8000220 <__NVIC_EnableIRQ>
		NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	2007      	movs	r0, #7
 8000548:	f7ff fe84 	bl	8000254 <__NVIC_SetPriority>
    }
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bdb0      	pop	{r4, r5, r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000
 800055c:	40010400 	.word	0x40010400

08000560 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 800056a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	430a      	orrs	r2, r1
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <LL_IOP_GRP1_EnableClock+0x28>)
 8000576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b004      	add	sp, #16
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <LL_SYSCFG_SetEXTISource+0x48>)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	21ff      	movs	r1, #255	; 0xff
 800059c:	400b      	ands	r3, r1
 800059e:	3302      	adds	r3, #2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	589b      	ldr	r3, [r3, r2]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	210f      	movs	r1, #15
 80005aa:	4091      	lsls	r1, r2
 80005ac:	000a      	movs	r2, r1
 80005ae:	43d2      	mvns	r2, r2
 80005b0:	401a      	ands	r2, r3
 80005b2:	0011      	movs	r1, r2
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	409a      	lsls	r2, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <LL_SYSCFG_SetEXTISource+0x48>)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	24ff      	movs	r4, #255	; 0xff
 80005c2:	4023      	ands	r3, r4
 80005c4:	430a      	orrs	r2, r1
 80005c6:	3302      	adds	r3, #2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	501a      	str	r2, [r3, r0]
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b003      	add	sp, #12
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40010000 	.word	0x40010000

080005d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6819      	ldr	r1, [r3, #0]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	435b      	muls	r3, r3
 80005ec:	001a      	movs	r2, r3
 80005ee:	0013      	movs	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	43db      	mvns	r3, r3
 80005f6:	400b      	ands	r3, r1
 80005f8:	001a      	movs	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	435b      	muls	r3, r3
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	434b      	muls	r3, r1
 8000602:	431a      	orrs	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}

08000610 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68d9      	ldr	r1, [r3, #12]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	435b      	muls	r3, r3
 8000624:	001a      	movs	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	189b      	adds	r3, r3, r2
 800062c:	43db      	mvns	r3, r3
 800062e:	400b      	ands	r3, r1
 8000630:	001a      	movs	r2, r3
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	435b      	muls	r3, r3
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	434b      	muls	r3, r1
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	60da      	str	r2, [r3, #12]
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000666:	2418      	movs	r4, #24
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2308      	movs	r3, #8
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f001 f98d 	bl	8001990 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f001 f986 	bl	8001990 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000684:	2004      	movs	r0, #4
 8000686:	f7ff ff6b 	bl	8000560 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f7ff ff68 	bl	8000560 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff65 	bl	8000560 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2120      	movs	r1, #32
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ffd3 	bl	8000648 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xc0>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff70 	bl	800058c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <MX_GPIO_Init+0xc4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	0019      	movs	r1, r3
 80006b6:	f7ff ffab 	bl	8000610 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <MX_GPIO_Init+0xc4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	0019      	movs	r1, r3
 80006c4:	f7ff ff88 	bl	80005d8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0192      	lsls	r2, r2, #6
 80006d0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fc7c 	bl	8000fe4 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2220      	movs	r2, #32
 80006f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	003a      	movs	r2, r7
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fda8 	bl	8001268 <LL_GPIO_Init>

}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b009      	add	sp, #36	; 0x24
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	00040003 	.word	0x00040003
 8000724:	50000800 	.word	0x50000800

08000728 <Led_init>:
#include "led.h"

void Led_init(LED_TypeDef *led, GPIO_TypeDef * port, uint8_t pn){
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	701a      	strb	r2, [r3, #0]

	led->gpioPort=port;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	601a      	str	r2, [r3, #0]
	led->pin=pn;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1dfa      	adds	r2, r7, #7
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	711a      	strb	r2, [r3, #4]

	//Activation de l'horloge sur le port en question

	//d�terminer le num�ro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port=(uint32_t)((uint32_t *)port - IOPPERIPH_BASE)/ (uint32_t)0x400;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	22c0      	movs	r2, #192	; 0xc0
 8000748:	0612      	lsls	r2, r2, #24
 800074a:	4694      	mov	ip, r2
 800074c:	4463      	add	r3, ip
 800074e:	0a9a      	lsrs	r2, r3, #10
 8000750:	2117      	movs	r1, #23
 8000752:	187b      	adds	r3, r7, r1
 8000754:	701a      	strb	r2, [r3, #0]
	//activation de l'hologe
	//2-activation de l'hologe
	RCC->IOPENR|=1<<nb_port;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <Led_init+0x88>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	187b      	adds	r3, r7, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2101      	movs	r1, #1
 8000760:	4099      	lsls	r1, r3
 8000762:	000b      	movs	r3, r1
 8000764:	0019      	movs	r1, r3
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <Led_init+0x88>)
 8000768:	430a      	orrs	r2, r1
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en sortie
	led->gpioPort->MODER&=~(0b11<<2*pn);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	2103      	movs	r1, #3
 800077a:	4099      	lsls	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	43db      	mvns	r3, r3
 8000780:	0019      	movs	r1, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	601a      	str	r2, [r3, #0]
	led->gpioPort->MODER|=(0b01<<2*pn);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4099      	lsls	r1, r3
 800079a:	000b      	movs	r3, r1
 800079c:	0019      	movs	r1, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b006      	add	sp, #24
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <Led_toggle>:

void Led_turnOff(LED_TypeDef *led){
	led->gpioPort->ODR&=~(1<<led->pin);
}

void Led_toggle(LED_TypeDef *led){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	led->gpioPort->ODR^=(1<<led->pin);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	0019      	movs	r1, r3
 80007c8:	2301      	movs	r3, #1
 80007ca:	408b      	lsls	r3, r1
 80007cc:	0019      	movs	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	404a      	eors	r2, r1
 80007d4:	615a      	str	r2, [r3, #20]
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b7f      	cmp	r3, #127	; 0x7f
 80007f2:	d809      	bhi.n	8000808 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	001a      	movs	r2, r3
 80007fa:	231f      	movs	r3, #31
 80007fc:	401a      	ands	r2, r3
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_EnableIRQ+0x30>)
 8000800:	2101      	movs	r1, #1
 8000802:	4091      	lsls	r1, r2
 8000804:	000a      	movs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
  }
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	e000e100 	.word	0xe000e100

08000814 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <LL_RCC_HSI_Enable+0x18>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <LL_RCC_HSI_Enable+0x18>)
 800081e:	2101      	movs	r1, #1
 8000820:	430a      	orrs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <LL_RCC_HSI_IsReady+0x1c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2204      	movs	r2, #4
 800083a:	4013      	ands	r3, r2
 800083c:	2b04      	cmp	r3, #4
 800083e:	d101      	bne.n	8000844 <LL_RCC_HSI_IsReady+0x14>
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <LL_RCC_HSI_IsReady+0x16>
 8000844:	2300      	movs	r3, #0
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000

08000850 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800085e:	4013      	ands	r3, r2
 8000860:	0019      	movs	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	021a      	lsls	r2, r3, #8
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000868:	430a      	orrs	r2, r1
 800086a:	605a      	str	r2, [r3, #4]
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	ffffe0ff 	.word	0xffffe0ff

0800087c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <LL_RCC_SetSysClkSource+0x24>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2203      	movs	r2, #3
 800088a:	4393      	bics	r3, r2
 800088c:	0019      	movs	r1, r3
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_RCC_SetSysClkSource+0x24>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	430a      	orrs	r2, r1
 8000894:	60da      	str	r2, [r3, #12]
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000

080008a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <LL_RCC_GetSysClkSource+0x14>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	220c      	movs	r2, #12
 80008ae:	4013      	ands	r3, r2
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40021000 	.word	0x40021000

080008bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	22f0      	movs	r2, #240	; 0xf0
 80008ca:	4393      	bics	r3, r2
 80008cc:	0019      	movs	r1, r3
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	60da      	str	r2, [r3, #12]
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <LL_RCC_SetAPB1Prescaler+0x28>)
 80008f2:	4013      	ands	r3, r2
 80008f4:	0019      	movs	r1, r3
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000
 800090c:	fffff8ff 	.word	0xfffff8ff

08000910 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <LL_RCC_SetAPB2Prescaler+0x24>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <LL_RCC_SetAPB2Prescaler+0x28>)
 800091e:	4013      	ands	r3, r2
 8000920:	0019      	movs	r1, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	430a      	orrs	r2, r1
 8000928:	60da      	str	r2, [r3, #12]
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	ffffc7ff 	.word	0xffffc7ff

0800093c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	0c12      	lsrs	r2, r2, #16
 800094c:	43d2      	mvns	r2, r2
 800094e:	401a      	ands	r2, r3
 8000950:	0011      	movs	r1, r2
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	0c1a      	lsrs	r2, r3, #16
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <LL_RCC_SetUSARTClockSource+0x2c>)
 800095a:	430a      	orrs	r2, r1
 800095c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40021000 	.word	0x40021000

0800096c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <LL_APB1_GRP1_EnableClock+0x28>)
 8000976:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <LL_APB1_GRP1_EnableClock+0x28>)
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <LL_APB1_GRP1_EnableClock+0x28>)
 8000982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000

08000998 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80009a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80009ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b004      	add	sp, #16
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000

080009c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <LL_FLASH_SetLatency+0x24>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4393      	bics	r3, r2
 80009d4:	0019      	movs	r1, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <LL_FLASH_SetLatency+0x24>)
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40022000 	.word	0x40022000

080009ec <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <LL_FLASH_GetLatency+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2201      	movs	r2, #1
 80009f6:	4013      	ands	r3, r2
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40022000 	.word	0x40022000

08000a04 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	0019      	movs	r1, r3
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40007000 	.word	0x40007000
 8000a2c:	ffffe7ff 	.word	0xffffe7ff

08000a30 <EXTI2_3_IRQHandler>:
	if ((*last_button_state!=0) && (etat_courant_bouton==0)){
		LL_mDelay(20); //attendre 20ms
	}
	*last_button_state= etat_courant_bouton;
}
void EXTI2_3_IRQHandler(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
//s’il y une interruption en attente
	if ( EXTI->PR&(1<<3)){
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <EXTI2_3_IRQHandler+0x30>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d00c      	beq.n	8000a58 <EXTI2_3_IRQHandler+0x28>
		GPIOC->ODR^=(1<<7);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <EXTI2_3_IRQHandler+0x34>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <EXTI2_3_IRQHandler+0x34>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	404a      	eors	r2, r1
 8000a48:	615a      	str	r2, [r3, #20]
//il ne faut pas oublier de réinitialiser le flag
		EXTI->PR|=(1<<12);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI2_3_IRQHandler+0x30>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <EXTI2_3_IRQHandler+0x30>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0149      	lsls	r1, r1, #5
 8000a54:	430a      	orrs	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
	}
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40010400 	.word	0x40010400
 8000a64:	50000800 	.word	0x50000800

08000a68 <TIM_config>:
void TIM_config(TIM_TypeDef * timer, uint32_t HCLKFrequency, uint8_t nb_s){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	701a      	strb	r2, [r3, #0]
	if(timer==TIM22){
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <TIM_config+0xd8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <TIM_config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_TIM22EN;
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <TIM_config+0xdc>)
 8000a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <TIM_config+0xdc>)
 8000a84:	2120      	movs	r1, #32
 8000a86:	430a      	orrs	r2, r1
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8a:	e020      	b.n	8000ace <TIM_config+0x66>
	}
	else if(timer==TIM21){
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <TIM_config+0xe0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <TIM_config+0x3a>
			RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <TIM_config+0xdc>)
 8000a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <TIM_config+0xdc>)
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa0:	e015      	b.n	8000ace <TIM_config+0x66>
	}
	else if(timer==TIM2){
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d106      	bne.n	8000aba <TIM_config+0x52>
			RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <TIM_config+0xdc>)
 8000aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <TIM_config+0xdc>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ab8:	e009      	b.n	8000ace <TIM_config+0x66>
	}
	else if(timer==TIM6){
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <TIM_config+0xe4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d105      	bne.n	8000ace <TIM_config+0x66>
			RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <TIM_config+0xdc>)
 8000ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <TIM_config+0xdc>)
 8000ac8:	2110      	movs	r1, #16
 8000aca:	430a      	orrs	r2, r1
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	timer->CR1|=TIM_CR1_DIR_Msk;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	601a      	str	r2, [r3, #0]
	timer->PSC=999;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <TIM_config+0xe8>)
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
	timer->DIER|=TIM_DIER_UIE_Msk;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	60da      	str	r2, [r3, #12]
	if(timer==TIM22){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <TIM_config+0xd8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d103      	bne.n	8000afc <TIM_config+0x94>
			NVIC_EnableIRQ(TIM22_IRQn);
 8000af4:	2016      	movs	r0, #22
 8000af6:	f7ff fe73 	bl	80007e0 <__NVIC_EnableIRQ>
 8000afa:	e017      	b.n	8000b2c <TIM_config+0xc4>
		}
		else if(timer==TIM21){
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <TIM_config+0xe0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d103      	bne.n	8000b0c <TIM_config+0xa4>
			NVIC_EnableIRQ(TIM21_IRQn);
 8000b04:	2014      	movs	r0, #20
 8000b06:	f7ff fe6b 	bl	80007e0 <__NVIC_EnableIRQ>
 8000b0a:	e00f      	b.n	8000b2c <TIM_config+0xc4>
		}
		else if(timer==TIM2){
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d103      	bne.n	8000b1e <TIM_config+0xb6>
			NVIC_EnableIRQ(TIM2_IRQn);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff fe62 	bl	80007e0 <__NVIC_EnableIRQ>
 8000b1c:	e006      	b.n	8000b2c <TIM_config+0xc4>
		}
		else if(timer==TIM6){
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <TIM_config+0xe4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d102      	bne.n	8000b2c <TIM_config+0xc4>
			NVIC_EnableIRQ(TIM6_IRQn);
 8000b26:	2011      	movs	r0, #17
 8000b28:	f7ff fe5a 	bl	80007e0 <__NVIC_EnableIRQ>
		}

	timer->CR1|=TIM_CR1_CEN_Msk;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2201      	movs	r2, #1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b004      	add	sp, #16
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	000003e7 	.word	0x000003e7

08000b54 <TIM21_IRQHandler>:
void TIM21_IRQHandler(LED_TypeDef *led){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	TIM21->SR = TIM21->SR & ~TIM_SR_UIF_Msk;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <TIM21_IRQHandler+0x24>)
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <TIM21_IRQHandler+0x24>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	438a      	bics	r2, r1
 8000b66:	611a      	str	r2, [r3, #16]
	Led_toggle(led);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fe22 	bl	80007b4 <Led_toggle>
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800

08000b7c <TIM2_IRQHandler>:
void TIM2_IRQHandler(LED_TypeDef *led){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
TIM2->SR = TIM2->SR & ~TIM_SR_UIF_Msk;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2101      	movs	r1, #1
 8000b90:	438a      	bics	r2, r1
 8000b92:	611a      	str	r2, [r3, #16]
Led_toggle(led);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fe0c 	bl	80007b4 <Led_toggle>
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fef5 	bl	8000998 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	055b      	lsls	r3, r3, #21
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff feda 	bl	800096c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f840 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f7ff fd50 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f8e6 	bl	8000d90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Led_init(&led,GPIOA,5);
 8000bc4:	23a0      	movs	r3, #160	; 0xa0
 8000bc6:	05d9      	lsls	r1, r3, #23
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <main+0x78>)
 8000bca:	2205      	movs	r2, #5
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fdab 	bl	8000728 <Led_init>
  Button_init(&bouton, GPIOC, 13, LL_GPIO_PULL_NO);
 8000bd2:	4913      	ldr	r1, [pc, #76]	; (8000c20 <main+0x7c>)
 8000bd4:	4813      	ldr	r0, [pc, #76]	; (8000c24 <main+0x80>)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	220d      	movs	r2, #13
 8000bda:	f7ff fba9 	bl	8000330 <Button_init>
  Led_init(&led2,GPIOC,7);
 8000bde:	4910      	ldr	r1, [pc, #64]	; (8000c20 <main+0x7c>)
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <main+0x84>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fd9f 	bl	8000728 <Led_init>
  Button_init(&bouton2, GPIOB, 3, LL_GPIO_PULL_DOWN);
 8000bea:	4910      	ldr	r1, [pc, #64]	; (8000c2c <main+0x88>)
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <main+0x8c>)
 8000bee:	2302      	movs	r3, #2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	f7ff fb9d 	bl	8000330 <Button_init>
  Button_enableIRQ(&bouton2,LL_EXTI_TRIGGER_RISING);
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <main+0x8c>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fbf6 	bl	80003ec <Button_enableIRQ>
  TIM_config(TIM21, 16000000, 1);
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <main+0x90>)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <main+0x94>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff2e 	bl	8000a68 <TIM_config>
  TIM_config(TIM2, 16000000, 2);
 8000c0c:	4909      	ldr	r1, [pc, #36]	; (8000c34 <main+0x90>)
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2202      	movs	r2, #2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff27 	bl	8000a68 <TIM_config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <main+0x76>
 8000c1c:	20000028 	.word	0x20000028
 8000c20:	50000800 	.word	0x50000800
 8000c24:	20000020 	.word	0x20000020
 8000c28:	20000038 	.word	0x20000038
 8000c2c:	50000400 	.word	0x50000400
 8000c30:	20000030 	.word	0x20000030
 8000c34:	00f42400 	.word	0x00f42400
 8000c38:	40010800 	.word	0x40010800

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff febf 	bl	80009c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	f7ff fed0 	bl	80009ec <LL_FLASH_GetLatency>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d1fb      	bne.n	8000c48 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fed5 	bl	8000a04 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000c5a:	f7ff fddb 	bl	8000814 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	f7ff fde6 	bl	8000830 <LL_RCC_HSI_IsReady>
 8000c64:	0003      	movs	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d1fa      	bne.n	8000c60 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff fdf0 	bl	8000850 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fe23 	bl	80008bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fe34 	bl	80008e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fe47 	bl	8000910 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fdfa 	bl	800087c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	f7ff fe0b 	bl	80008a4 <LL_RCC_GetSysClkSource>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d1fa      	bne.n	8000c8a <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <SystemClock_Config+0x78>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 fe38 	bl	800190c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SystemClock_Config+0x78>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fe44 	bl	800192c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000ca4:	23c0      	movs	r3, #192	; 0xc0
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fe47 	bl	800093c <LL_RCC_SetUSARTClockSource>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	00f42400 	.word	0x00f42400

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <LL_APB1_GRP1_EnableClock>:
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <LL_APB1_GRP1_EnableClock+0x28>)
 8000cf6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LL_APB1_GRP1_EnableClock+0x28>)
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <LL_IOP_GRP1_EnableClock>:
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000

08000d44 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2201      	movs	r2, #1
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <LL_USART_ConfigAsyncMode+0x2c>)
 8000d6e:	401a      	ands	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	222a      	movs	r2, #42	; 0x2a
 8000d7a:	4393      	bics	r3, r2
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	609a      	str	r2, [r3, #8]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	ffffb7ff 	.word	0xffffb7ff

08000d90 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b08f      	sub	sp, #60	; 0x3c
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d96:	241c      	movs	r4, #28
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	231c      	movs	r3, #28
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f000 fdf5 	bl	8001990 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2318      	movs	r3, #24
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f000 fdee 	bl	8001990 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff97 	bl	8000cec <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff ffaa 	bl	8000d18 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2202      	movs	r2, #2
 8000dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2204      	movs	r2, #4
 8000de6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	23a0      	movs	r3, #160	; 0xa0
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fa39 	bl	8001268 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2208      	movs	r2, #8
 8000dfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2202      	movs	r2, #2
 8000e00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2203      	movs	r2, #3
 8000e06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2204      	movs	r2, #4
 8000e18:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	1d3a      	adds	r2, r7, #4
 8000e1c:	23a0      	movs	r3, #160	; 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fa20 	bl	8001268 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	22e1      	movs	r2, #225	; 0xe1
 8000e2c:	0252      	lsls	r2, r2, #9
 8000e2e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e30:	0021      	movs	r1, r4
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	220c      	movs	r2, #12
 8000e48:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f000 fcd7 	bl	8001810 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ff7b 	bl	8000d60 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <MX_USART2_UART_Init+0xec>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff69 	bl	8000d44 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b00f      	add	sp, #60	; 0x3c
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40004400 	.word	0x40004400

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eaa:	f7ff ff1a 	bl	8000ce2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f000 fd4b 	bl	8001948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fe77 	bl	8000ba4 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   r0, =_estack
 8000eb8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ec4:	080019e4 	.word	0x080019e4
  ldr r2, =_sbss
 8000ec8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ecc:	20000040 	.word	0x20000040

08000ed0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_COMP_IRQHandler>
	...

08000ed4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <LL_EXTI_DisableIT_0_31+0x20>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <LL_EXTI_DisableIT_0_31+0x20>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40010400 	.word	0x40010400

08000f18 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000f22:	6859      	ldr	r1, [r3, #4]
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	605a      	str	r2, [r3, #4]

}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010400 	.word	0x40010400

08000f38 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	605a      	str	r2, [r3, #4]
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40010400 	.word	0x40010400

08000f5c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000f66:	6899      	ldr	r1, [r3, #8]
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	609a      	str	r2, [r3, #8]

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40010400 	.word	0x40010400

08000f7c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	609a      	str	r2, [r3, #8]

}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000faa:	68d9      	ldr	r1, [r3, #12]
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	60da      	str	r2, [r3, #12]
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d100      	bne.n	8000ffe <LL_EXTI_Init+0x1a>
 8000ffc:	e068      	b.n	80010d0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <LL_EXTI_Init+0x24>
 8001006:	e06e      	b.n	80010e6 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	795b      	ldrb	r3, [r3, #5]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d01b      	beq.n	8001048 <LL_EXTI_Init+0x64>
 8001010:	dc25      	bgt.n	800105e <LL_EXTI_Init+0x7a>
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <LL_EXTI_Init+0x38>
 8001016:	2b01      	cmp	r3, #1
 8001018:	d00b      	beq.n	8001032 <LL_EXTI_Init+0x4e>
 800101a:	e020      	b.n	800105e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff89 	bl	8000f38 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff52 	bl	8000ed4 <LL_EXTI_EnableIT_0_31>
          break;
 8001030:	e01a      	b.n	8001068 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff ff5c 	bl	8000ef4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff69 	bl	8000f18 <LL_EXTI_EnableEvent_0_31>
          break;
 8001046:	e00f      	b.n	8001068 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff41 	bl	8000ed4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff ff5e 	bl	8000f18 <LL_EXTI_EnableEvent_0_31>
          break;
 800105c:	e004      	b.n	8001068 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
          break;
 8001066:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	799b      	ldrb	r3, [r3, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d03a      	beq.n	80010e6 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	799b      	ldrb	r3, [r3, #6]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d01b      	beq.n	80010b0 <LL_EXTI_Init+0xcc>
 8001078:	dc25      	bgt.n	80010c6 <LL_EXTI_Init+0xe2>
 800107a:	2b01      	cmp	r3, #1
 800107c:	d002      	beq.n	8001084 <LL_EXTI_Init+0xa0>
 800107e:	2b02      	cmp	r3, #2
 8001080:	d00b      	beq.n	800109a <LL_EXTI_Init+0xb6>
 8001082:	e020      	b.n	80010c6 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff99 	bl	8000fc0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff ff62 	bl	8000f5c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001098:	e026      	b.n	80010e8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff6c 	bl	8000f7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ff79 	bl	8000fa0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80010ae:	e01b      	b.n	80010e8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ff51 	bl	8000f5c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff ff6e 	bl	8000fa0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80010c4:	e010      	b.n	80010e8 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
            break;
 80010ce:	e00b      	b.n	80010e8 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ff0d 	bl	8000ef4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ff2a 	bl	8000f38 <LL_EXTI_DisableEvent_0_31>
 80010e4:	e000      	b.n	80010e8 <LL_EXTI_Init+0x104>
      }
 80010e6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <LL_GPIO_SetPinMode>:
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	435b      	muls	r3, r3
 800110a:	001a      	movs	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	189b      	adds	r3, r3, r2
 8001112:	43db      	mvns	r3, r3
 8001114:	400b      	ands	r3, r1
 8001116:	001a      	movs	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	435b      	muls	r3, r3
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	434b      	muls	r3, r1
 8001120:	431a      	orrs	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}

0800112e <LL_GPIO_SetPinOutputType>:
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	434b      	muls	r3, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	605a      	str	r2, [r3, #4]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b004      	add	sp, #16
 8001156:	bd80      	pop	{r7, pc}

08001158 <LL_GPIO_SetPinSpeed>:
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6899      	ldr	r1, [r3, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	435b      	muls	r3, r3
 800116c:	001a      	movs	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	189b      	adds	r3, r3, r2
 8001174:	43db      	mvns	r3, r3
 8001176:	400b      	ands	r3, r1
 8001178:	001a      	movs	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	435b      	muls	r3, r3
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	434b      	muls	r3, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	609a      	str	r2, [r3, #8]
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b004      	add	sp, #16
 800118e:	bd80      	pop	{r7, pc}

08001190 <LL_GPIO_SetPinPull>:
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	68d9      	ldr	r1, [r3, #12]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	435b      	muls	r3, r3
 80011a4:	001a      	movs	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	189b      	adds	r3, r3, r2
 80011ac:	43db      	mvns	r3, r3
 80011ae:	400b      	ands	r3, r1
 80011b0:	001a      	movs	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	435b      	muls	r3, r3
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	434b      	muls	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b004      	add	sp, #16
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LL_GPIO_SetAFPin_0_7>:
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a19      	ldr	r1, [r3, #32]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	435b      	muls	r3, r3
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	4353      	muls	r3, r2
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	435a      	muls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	43db      	mvns	r3, r3
 80011ec:	400b      	ands	r3, r1
 80011ee:	001a      	movs	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	435b      	muls	r3, r3
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	434b      	muls	r3, r1
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	434b      	muls	r3, r1
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	434b      	muls	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	621a      	str	r2, [r3, #32]
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}

0800120e <LL_GPIO_SetAFPin_8_15>:
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	0a12      	lsrs	r2, r2, #8
 8001226:	4353      	muls	r3, r2
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	0a12      	lsrs	r2, r2, #8
 800122c:	4353      	muls	r3, r2
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	0a12      	lsrs	r2, r2, #8
 8001232:	435a      	muls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	43db      	mvns	r3, r3
 800123c:	400b      	ands	r3, r1
 800123e:	001a      	movs	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	0a09      	lsrs	r1, r1, #8
 8001248:	434b      	muls	r3, r1
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	0a09      	lsrs	r1, r1, #8
 800124e:	434b      	muls	r3, r1
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	0a09      	lsrs	r1, r1, #8
 8001254:	434b      	muls	r3, r1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	434b      	muls	r3, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b004      	add	sp, #16
 8001266:	bd80      	pop	{r7, pc}

08001268 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800127a:	e048      	b.n	800130e <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d003      	beq.n	80012a2 <LL_GPIO_Init+0x3a>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d10e      	bne.n	80012c0 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff54 	bl	8001158 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff ff37 	bl	800112e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff61 	bl	8001190 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d111      	bne.n	80012fa <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2bff      	cmp	r3, #255	; 0xff
 80012da:	d807      	bhi.n	80012ec <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff6f 	bl	80011c8 <LL_GPIO_SetAFPin_0_7>
 80012ea:	e006      	b.n	80012fa <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ff8a 	bl	800120e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff fef7 	bl	80010f6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	40da      	lsrs	r2, r3
 8001316:	1e13      	subs	r3, r2, #0
 8001318:	d1b0      	bne.n	800127c <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}

08001324 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <LL_RCC_HSI_IsReady+0x1c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2204      	movs	r2, #4
 800132e:	4013      	ands	r3, r2
 8001330:	2b04      	cmp	r3, #4
 8001332:	d101      	bne.n	8001338 <LL_RCC_HSI_IsReady+0x14>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_RCC_HSI_IsReady+0x16>
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <LL_RCC_LSE_IsReady+0x24>)
 800134a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	401a      	ands	r2, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	429a      	cmp	r2, r3
 8001358:	d101      	bne.n	800135e <LL_RCC_LSE_IsReady+0x1a>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_RCC_LSE_IsReady+0x1c>
 800135e:	2300      	movs	r3, #0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000

0800136c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <LL_RCC_MSI_GetRange+0x14>)
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	23e0      	movs	r3, #224	; 0xe0
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4013      	ands	r3, r2
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000

08001384 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <LL_RCC_GetSysClkSource+0x14>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40021000 	.word	0x40021000

0800139c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <LL_RCC_GetAHBPrescaler+0x14>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	22f0      	movs	r2, #240	; 0xf0
 80013a6:	4013      	ands	r3, r2
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	23e0      	movs	r3, #224	; 0xe0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4013      	ands	r3, r2
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <LL_RCC_GetAPB2Prescaler+0x14>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	23e0      	movs	r3, #224	; 0xe0
 80013d6:	019b      	lsls	r3, r3, #6
 80013d8:	4013      	ands	r3, r2
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <LL_RCC_GetUSARTClockSource+0x20>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	4313      	orrs	r3, r2
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40021000 	.word	0x40021000

08001408 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <LL_RCC_PLL_GetMainSource+0x14>)
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	4013      	ands	r3, r2
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000

08001420 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	23f0      	movs	r3, #240	; 0xf0
 800142a:	039b      	lsls	r3, r3, #14
 800142c:	4013      	ands	r3, r2
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <LL_RCC_PLL_GetDivider+0x14>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	23c0      	movs	r3, #192	; 0xc0
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	4013      	ands	r3, r2
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2210      	movs	r2, #16
 800145a:	4013      	ands	r3, r2
 800145c:	2b10      	cmp	r3, #16
 800145e:	d101      	bne.n	8001464 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001464:	2300      	movs	r3, #0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000

08001470 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d139      	bne.n	80014f6 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ffad 	bl	80013e4 <LL_RCC_GetUSARTClockSource>
 800148a:	0003      	movs	r3, r0
 800148c:	4a40      	ldr	r2, [pc, #256]	; (8001590 <LL_RCC_GetUSARTClockFreq+0x120>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01c      	beq.n	80014cc <LL_RCC_GetUSARTClockFreq+0x5c>
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <LL_RCC_GetUSARTClockFreq+0x120>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d821      	bhi.n	80014dc <LL_RCC_GetUSARTClockFreq+0x6c>
 8001498:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <LL_RCC_GetUSARTClockFreq+0x124>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d003      	beq.n	80014a6 <LL_RCC_GetUSARTClockFreq+0x36>
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <LL_RCC_GetUSARTClockFreq+0x128>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d005      	beq.n	80014b0 <LL_RCC_GetUSARTClockFreq+0x40>
 80014a4:	e01a      	b.n	80014dc <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80014a6:	f000 f883 	bl	80015b0 <RCC_GetSystemClockFreq>
 80014aa:	0003      	movs	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
        break;
 80014ae:	e027      	b.n	8001500 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80014b0:	f7ff ff38 	bl	8001324 <LL_RCC_HSI_IsReady>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d020      	beq.n	80014fa <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80014b8:	f7ff ffca 	bl	8001450 <LL_RCC_IsActiveFlag_HSIDIV>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d002      	beq.n	80014c6 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <LL_RCC_GetUSARTClockFreq+0x12c>)
 80014c2:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80014c4:	e019      	b.n	80014fa <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <LL_RCC_GetUSARTClockFreq+0x130>)
 80014c8:	60fb      	str	r3, [r7, #12]
        break;
 80014ca:	e016      	b.n	80014fa <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80014cc:	f7ff ff3a 	bl	8001344 <LL_RCC_LSE_IsReady>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d014      	beq.n	80014fe <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014da:	e010      	b.n	80014fe <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80014dc:	f000 f868 	bl	80015b0 <RCC_GetSystemClockFreq>
 80014e0:	0003      	movs	r3, r0
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f8a8 	bl	8001638 <RCC_GetHCLKClockFreq>
 80014e8:	0003      	movs	r3, r0
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f8ce 	bl	800168c <RCC_GetPCLK2ClockFreq>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
        break;
 80014f4:	e004      	b.n	8001500 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	e002      	b.n	8001500 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	e000      	b.n	8001500 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80014fe:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d139      	bne.n	800157a <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff6b 	bl	80013e4 <LL_RCC_GetUSARTClockSource>
 800150e:	0003      	movs	r3, r0
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01c      	beq.n	8001550 <LL_RCC_GetUSARTClockFreq+0xe0>
 8001516:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d821      	bhi.n	8001560 <LL_RCC_GetUSARTClockFreq+0xf0>
 800151c:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <LL_RCC_GetUSARTClockFreq+0x138>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d003      	beq.n	800152a <LL_RCC_GetUSARTClockFreq+0xba>
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <LL_RCC_GetUSARTClockFreq+0x13c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d005      	beq.n	8001534 <LL_RCC_GetUSARTClockFreq+0xc4>
 8001528:	e01a      	b.n	8001560 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800152a:	f000 f841 	bl	80015b0 <RCC_GetSystemClockFreq>
 800152e:	0003      	movs	r3, r0
 8001530:	60fb      	str	r3, [r7, #12]
        break;
 8001532:	e027      	b.n	8001584 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001534:	f7ff fef6 	bl	8001324 <LL_RCC_HSI_IsReady>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d020      	beq.n	800157e <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800153c:	f7ff ff88 	bl	8001450 <LL_RCC_IsActiveFlag_HSIDIV>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d002      	beq.n	800154a <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <LL_RCC_GetUSARTClockFreq+0x12c>)
 8001546:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001548:	e019      	b.n	800157e <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <LL_RCC_GetUSARTClockFreq+0x130>)
 800154c:	60fb      	str	r3, [r7, #12]
        break;
 800154e:	e016      	b.n	800157e <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001550:	f7ff fef8 	bl	8001344 <LL_RCC_LSE_IsReady>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d014      	beq.n	8001582 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800155e:	e010      	b.n	8001582 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001560:	f000 f826 	bl	80015b0 <RCC_GetSystemClockFreq>
 8001564:	0003      	movs	r3, r0
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f866 	bl	8001638 <RCC_GetHCLKClockFreq>
 800156c:	0003      	movs	r3, r0
 800156e:	0018      	movs	r0, r3
 8001570:	f000 f878 	bl	8001664 <RCC_GetPCLK1ClockFreq>
 8001574:	0003      	movs	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]
        break;
 8001578:	e004      	b.n	8001584 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	e002      	b.n	8001584 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	e000      	b.n	8001584 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8001582:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	00030003 	.word	0x00030003
 8001594:	00030001 	.word	0x00030001
 8001598:	00030002 	.word	0x00030002
 800159c:	003d0900 	.word	0x003d0900
 80015a0:	00f42400 	.word	0x00f42400
 80015a4:	000c000c 	.word	0x000c000c
 80015a8:	000c0004 	.word	0x000c0004
 80015ac:	000c0008 	.word	0x000c0008

080015b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80015b6:	f7ff fee5 	bl	8001384 <LL_RCC_GetSysClkSource>
 80015ba:	0003      	movs	r3, r0
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d020      	beq.n	8001602 <RCC_GetSystemClockFreq+0x52>
 80015c0:	d824      	bhi.n	800160c <RCC_GetSystemClockFreq+0x5c>
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d01a      	beq.n	80015fc <RCC_GetSystemClockFreq+0x4c>
 80015c6:	d821      	bhi.n	800160c <RCC_GetSystemClockFreq+0x5c>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <RCC_GetSystemClockFreq+0x22>
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d00b      	beq.n	80015e8 <RCC_GetSystemClockFreq+0x38>
 80015d0:	e01c      	b.n	800160c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80015d2:	f7ff fecb 	bl	800136c <LL_RCC_MSI_GetRange>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0b5b      	lsrs	r3, r3, #13
 80015da:	3301      	adds	r3, #1
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0212      	lsls	r2, r2, #8
 80015e0:	409a      	lsls	r2, r3
 80015e2:	0013      	movs	r3, r2
 80015e4:	607b      	str	r3, [r7, #4]
      break;
 80015e6:	e01c      	b.n	8001622 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80015e8:	f7ff ff32 	bl	8001450 <LL_RCC_IsActiveFlag_HSIDIV>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d002      	beq.n	80015f6 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <RCC_GetSystemClockFreq+0x7c>)
 80015f2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80015f4:	e015      	b.n	8001622 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <RCC_GetSystemClockFreq+0x80>)
 80015f8:	607b      	str	r3, [r7, #4]
      break;
 80015fa:	e012      	b.n	8001622 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <RCC_GetSystemClockFreq+0x84>)
 80015fe:	607b      	str	r3, [r7, #4]
      break;
 8001600:	e00f      	b.n	8001622 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001602:	f000 f857 	bl	80016b4 <RCC_PLL_GetFreqDomain_SYS>
 8001606:	0003      	movs	r3, r0
 8001608:	607b      	str	r3, [r7, #4]
      break;
 800160a:	e00a      	b.n	8001622 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800160c:	f7ff feae 	bl	800136c <LL_RCC_MSI_GetRange>
 8001610:	0003      	movs	r3, r0
 8001612:	0b5b      	lsrs	r3, r3, #13
 8001614:	3301      	adds	r3, #1
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	0212      	lsls	r2, r2, #8
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	607b      	str	r3, [r7, #4]
      break;
 8001620:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	003d0900 	.word	0x003d0900
 8001630:	00f42400 	.word	0x00f42400
 8001634:	007a1200 	.word	0x007a1200

08001638 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001640:	f7ff feac 	bl	800139c <LL_RCC_GetAHBPrescaler>
 8001644:	0003      	movs	r3, r0
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	220f      	movs	r2, #15
 800164a:	4013      	ands	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <RCC_GetHCLKClockFreq+0x28>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	001a      	movs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	40d3      	lsrs	r3, r2
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	080019b8 	.word	0x080019b8

08001664 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800166c:	f7ff fea2 	bl	80013b4 <LL_RCC_GetAPB1Prescaler>
 8001670:	0003      	movs	r3, r0
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <RCC_GetPCLK1ClockFreq+0x24>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	001a      	movs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	40d3      	lsrs	r3, r2
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	080019c8 	.word	0x080019c8

0800168c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001694:	f7ff fe9a 	bl	80013cc <LL_RCC_GetAPB2Prescaler>
 8001698:	0003      	movs	r3, r0
 800169a:	0adb      	lsrs	r3, r3, #11
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	001a      	movs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	40d3      	lsrs	r3, r2
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	080019c8 	.word	0x080019c8

080016b4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80016ba:	f7ff fea5 	bl	8001408 <LL_RCC_PLL_GetMainSource>
 80016be:	0003      	movs	r3, r0
 80016c0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80016c8:	f7ff fec2 	bl	8001450 <LL_RCC_IsActiveFlag_HSIDIV>
 80016cc:	1e03      	subs	r3, r0, #0
 80016ce:	d002      	beq.n	80016d6 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80016d2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80016d4:	e005      	b.n	80016e2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80016d8:	607b      	str	r3, [r7, #4]
      break;
 80016da:	e002      	b.n	80016e2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80016de:	607b      	str	r3, [r7, #4]
      break;
 80016e0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80016e2:	f7ff fe9d 	bl	8001420 <LL_RCC_PLL_GetMultiplicator>
 80016e6:	0003      	movs	r3, r0
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	001a      	movs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4353      	muls	r3, r2
 80016f4:	001c      	movs	r4, r3
 80016f6:	f7ff fe9f 	bl	8001438 <LL_RCC_PLL_GetDivider>
 80016fa:	0003      	movs	r3, r0
 80016fc:	0d9b      	lsrs	r3, r3, #22
 80016fe:	3301      	adds	r3, #1
 8001700:	0019      	movs	r1, r3
 8001702:	0020      	movs	r0, r4
 8001704:	f7fe fd00 	bl	8000108 <__udivsi3>
 8001708:	0003      	movs	r3, r0
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b003      	add	sp, #12
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	003d0900 	.word	0x003d0900
 8001718:	00f42400 	.word	0x00f42400
 800171c:	007a1200 	.word	0x007a1200
 8001720:	080019d0 	.word	0x080019d0

08001724 <LL_USART_IsEnabled>:
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	4013      	ands	r3, r2
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <LL_USART_IsEnabled+0x18>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <LL_USART_IsEnabled+0x1a>
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <LL_USART_SetStopBitsLength>:
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <LL_USART_SetStopBitsLength+0x24>)
 8001758:	401a      	ands	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	605a      	str	r2, [r3, #4]
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	ffffcfff 	.word	0xffffcfff

08001770 <LL_USART_SetHWFlowCtrl>:
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <LL_USART_SetHWFlowCtrl+0x24>)
 8001780:	401a      	ands	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	609a      	str	r2, [r3, #8]
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	fffffcff 	.word	0xfffffcff

08001798 <LL_USART_SetBaudRate>:
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d11c      	bne.n	80017ea <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	005a      	lsls	r2, r3, #1
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	0018      	movs	r0, r3
 80017be:	f7fe fca3 	bl	8000108 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <LL_USART_SetBaudRate+0x74>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	001a      	movs	r2, r3
 80017d8:	2307      	movs	r3, #7
 80017da:	4013      	ands	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	60da      	str	r2, [r3, #12]
}
 80017e8:	e00c      	b.n	8001804 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	085a      	lsrs	r2, r3, #1
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7fe fc87 	bl	8000108 <__udivsi3>
 80017fa:	0003      	movs	r3, r0
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	001a      	movs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	60da      	str	r2, [r3, #12]
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b006      	add	sp, #24
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0000fff0 	.word	0x0000fff0

08001810 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff ff7b 	bl	8001724 <LL_USART_IsEnabled>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d145      	bne.n	80018be <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <LL_USART_Init+0xbc>)
 8001838:	401a      	ands	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	4319      	orrs	r1, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4319      	orrs	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	430b      	orrs	r3, r1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff ff72 	bl	8001748 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0011      	movs	r1, r2
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff ff7f 	bl	8001770 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <LL_USART_Init+0xc0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d105      	bne.n	8001886 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800187a:	2003      	movs	r0, #3
 800187c:	f7ff fdf8 	bl	8001470 <LL_RCC_GetUSARTClockFreq>
 8001880:	0003      	movs	r3, r0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	e008      	b.n	8001898 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <LL_USART_Init+0xc4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d104      	bne.n	8001898 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800188e:	200c      	movs	r0, #12
 8001890:	f7ff fdee 	bl	8001470 <LL_RCC_GetUSARTClockFreq>
 8001894:	0003      	movs	r3, r0
 8001896:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00f      	beq.n	80018be <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 80018a6:	230f      	movs	r3, #15
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff6d 	bl	8001798 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80018be:	230f      	movs	r3, #15
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b004      	add	sp, #16
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	efff69f3 	.word	0xefff69f3
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40004400 	.word	0x40004400

080018d8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7fe fc0f 	bl	8000108 <__udivsi3>
 80018ea:	0003      	movs	r3, r0
 80018ec:	001a      	movs	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <LL_InitTick+0x30>)
 80018f0:	3a01      	subs	r2, #1
 80018f2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <LL_InitTick+0x30>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_InitTick+0x30>)
 80018fc:	2205      	movs	r2, #5
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}
 8001908:	e000e010 	.word	0xe000e010

0800190c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001914:	23fa      	movs	r3, #250	; 0xfa
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0011      	movs	r1, r2
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ffdb 	bl	80018d8 <LL_InitTick>
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <LL_SetSystemCoreClock+0x18>)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	20000000 	.word	0x20000000

08001948 <__libc_init_array>:
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	2600      	movs	r6, #0
 800194c:	4d0c      	ldr	r5, [pc, #48]	; (8001980 <__libc_init_array+0x38>)
 800194e:	4c0d      	ldr	r4, [pc, #52]	; (8001984 <__libc_init_array+0x3c>)
 8001950:	1b64      	subs	r4, r4, r5
 8001952:	10a4      	asrs	r4, r4, #2
 8001954:	42a6      	cmp	r6, r4
 8001956:	d109      	bne.n	800196c <__libc_init_array+0x24>
 8001958:	2600      	movs	r6, #0
 800195a:	f000 f821 	bl	80019a0 <_init>
 800195e:	4d0a      	ldr	r5, [pc, #40]	; (8001988 <__libc_init_array+0x40>)
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <__libc_init_array+0x44>)
 8001962:	1b64      	subs	r4, r4, r5
 8001964:	10a4      	asrs	r4, r4, #2
 8001966:	42a6      	cmp	r6, r4
 8001968:	d105      	bne.n	8001976 <__libc_init_array+0x2e>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	00b3      	lsls	r3, r6, #2
 800196e:	58eb      	ldr	r3, [r5, r3]
 8001970:	4798      	blx	r3
 8001972:	3601      	adds	r6, #1
 8001974:	e7ee      	b.n	8001954 <__libc_init_array+0xc>
 8001976:	00b3      	lsls	r3, r6, #2
 8001978:	58eb      	ldr	r3, [r5, r3]
 800197a:	4798      	blx	r3
 800197c:	3601      	adds	r6, #1
 800197e:	e7f2      	b.n	8001966 <__libc_init_array+0x1e>
 8001980:	080019dc 	.word	0x080019dc
 8001984:	080019dc 	.word	0x080019dc
 8001988:	080019dc 	.word	0x080019dc
 800198c:	080019e0 	.word	0x080019e0

08001990 <memset>:
 8001990:	0003      	movs	r3, r0
 8001992:	1882      	adds	r2, r0, r2
 8001994:	4293      	cmp	r3, r2
 8001996:	d100      	bne.n	800199a <memset+0xa>
 8001998:	4770      	bx	lr
 800199a:	7019      	strb	r1, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	e7f9      	b.n	8001994 <memset+0x4>

080019a0 <_init>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr

080019ac <_fini>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b2:	bc08      	pop	{r3}
 80019b4:	469e      	mov	lr, r3
 80019b6:	4770      	bx	lr
